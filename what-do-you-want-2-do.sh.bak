#!/bin/bash

# Master deployment script - Interactive menu for all deployment tasks
# Default action (no arguments): Sync web to iOS

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOYMENT_DIR="$SCRIPT_DIR/deployment"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored header
print_header() {
    echo ""
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}│${NC}           ${BLUE}App Deployment Menu${NC}                   ${CYAN}│${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
}

# Function to show menu
show_menu() {
    print_header
    echo -e "${YELLOW}What do you want to do?${NC}"
    echo ""
    echo -e "  ${BLUE}iOS:${NC}"
    echo -e "  ${GREEN}1)${NC} 🔄  Sync web files to iOS ${CYAN}(default)${NC}"
    echo -e "  ${GREEN}2)${NC} 🚀  Launch in iOS Simulator"
    echo -e "  ${GREEN}3)${NC} 📦  Publish to TestFlight"
    echo -e "  ${GREEN}4)${NC} 🏪  Publish to App Store"
    echo ""
    echo -e "  ${BLUE}Android:${NC}"
    echo -e "  ${GREEN}5)${NC} 🔄  Sync web files to Android"
    echo -e "  ${GREEN}6)${NC} 📦  Publish to Play Store"
    echo ""
    echo -e "  ${BLUE}Setup:${NC}"
    echo -e "  ${GREEN}7)${NC} 🎯  Initialize template with your app config"
    echo -e "  ${GREEN}8)${NC} 🔄  Revert template to TacoTalk defaults"
    echo -e "  ${GREEN}9)${NC} 📋  Show current configuration"
    echo ""
    echo -e "  ${BLUE}Tools:${NC}"
    echo -e "  ${GREEN}10)${NC} 📦  Increment version/build number"
    echo -e "  ${GREEN}11)${NC} 🔧  Fix nanopb build error"
    echo -e "  ${GREEN}12)${NC} 🔍  Verify OAuth configuration"
    echo -e "  ${GREEN}13)${NC} 🔑  Check Google OAuth credentials"
    echo -e "  ${GREEN}14)${NC} ✅  Verify general setup"
    echo -e "  ${GREEN}15)${NC} 📝  Update app version in HTML"
    echo -e "  ${GREEN}16)${NC} 📋  Generate beta release notes"
    echo -e "  ${GREEN}17)${NC} 🧹  Cleanup Xcode archives & temp data"
    echo -e "  ${GREEN}18)${NC} 🔬  Pre-submission test for App Store"
    echo ""
    echo -e "  ${BLUE}Admin:${NC}"
    echo -e "  ${GREEN}19)${NC} 🗑️  Reset Leaderboard ${RED}(⚠️  DANGER)${NC}"
    echo ""
    echo -e "  ${RED}0)${NC} 🚪  Exit"
    echo ""
    echo -ne "${YELLOW}Enter your choice [1]:${NC} "
}

# Function to run a deployment script
run_script() {
    local script_name=$1
    local script_path="$DEPLOYMENT_DIR/$script_name"

    if [ -f "$script_path" ]; then
        echo ""
        echo -e "${BLUE}▶ Running: $script_name${NC}"
        echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        "$script_path"
        local exit_code=$?
        echo ""
        if [ $exit_code -eq 0 ]; then
            echo -e "${GREEN}✅ Completed successfully!${NC}"
        else
            echo -e "${RED}❌ Script exited with code: $exit_code${NC}"
        fi
    else
        echo -e "${RED}❌ Error: Script not found: $script_path${NC}"
        exit 1
    fi
}

# Function to handle choice
handle_choice() {
    local choice=$1

    case $choice in
        1|"")
            run_script "sync-web-to-ios.sh"
            ;;
        2)
            run_script "launch-ios-simulator.sh"
            ;;
        3)
            echo ""
            echo -e "${YELLOW}⚠️  This will publish to TestFlight${NC}"
            echo -e "${YELLOW}   - Auto-increment build number${NC}"
            echo -e "${YELLOW}   - Update version in HTML${NC}"
            echo -e "${YELLOW}   - Sync web files${NC}"
            echo -e "${YELLOW}   - Build archive${NC}"
            echo -e "${YELLOW}   - Upload to TestFlight${NC}"
            echo ""
            echo -ne "${YELLOW}Continue? (y/N):${NC} "
            read confirm
            if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                run_script "publish-testflight.sh"
            else
                echo -e "${BLUE}ℹ️  Cancelled${NC}"
            fi
            ;;
        4)
            echo ""
            echo -e "${YELLOW}⚠️  This will publish to App Store${NC}"
            echo -e "${YELLOW}   - Auto-increment build number${NC}"
            echo -e "${YELLOW}   - Update version in HTML${NC}"
            echo -e "${YELLOW}   - Sync web files${NC}"
            echo -e "${YELLOW}   - Build archive${NC}"
            echo -e "${YELLOW}   - Upload to App Store${NC}"
            echo ""
            echo -ne "${YELLOW}Continue? (y/N):${NC} "
            read confirm
            if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                run_script "publish-appstore.sh"
            else
                echo -e "${BLUE}ℹ️  Cancelled${NC}"
            fi
            ;;
        4)
            run_script "sync-web-to-android.sh"
            ;;
        5)
            echo ""
            echo -e "${YELLOW}⚠️  This will publish to Play Store${NC}"
            echo -e "${YELLOW}   - Auto-increment build number${NC}"
            echo -e "${YELLOW}   - Update version in HTML${NC}"
            echo -e "${YELLOW}   - Sync web files${NC}"
            echo -e "${YELLOW}   - Build release AAB${NC}"
            echo ""
            echo -ne "${YELLOW}Continue? (y/N):${NC} "
            read confirm
            if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                run_script "publish-playstore.sh"
            else
                echo -e "${BLUE}ℹ️  Cancelled${NC}"
            fi
            ;;
        6)
            echo ""
            echo -e "${BLUE}▶ Running: init-template.sh${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            echo ""
            "$SCRIPT_DIR/init-template.sh"
            ;;
        7)
            echo ""
            echo -e "${BLUE}▶ Running: revert-template.sh${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            echo ""
            "$SCRIPT_DIR/revert-template.sh"
            ;;
        8)
            echo ""
            echo -e "${BLUE}▶ Running: show-config.sh${NC}"
            echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            echo ""
            "$SCRIPT_DIR/show-config.sh"
            ;;
        9)
            echo ""
            echo -e "${YELLOW}Increment which version?${NC}"
            echo "  1) Build number"
            echo "  2) Patch version (1.0.X)"
            echo "  3) Minor version (1.X.0)"
            echo "  4) Major version (X.0.0)"
            echo -ne "${YELLOW}Enter choice [1]:${NC} "
            read version_choice

            case $version_choice in
                1|"")
                    run_script "increment-version.sh" "build"
                    ;;
                2)
                    run_script "increment-version.sh" "patch"
                    ;;
                3)
                    run_script "increment-version.sh" "minor"
                    ;;
                4)
                    run_script "increment-version.sh" "major"
                    ;;
                *)
                    echo -e "${RED}❌ Invalid choice${NC}"
                    ;;
            esac
            ;;
        10)
            run_script "fix-nanopb.sh"
            ;;
        11)
            run_script "verify-oauth-config.sh"
            ;;
        12)
            run_script "verify-google-plist.sh"
            ;;
        13)
            run_script "verify-setup.sh"
            ;;
        14)
            run_script "update-app-version.sh"
            ;;
        15)
            run_script "generate-beta-notes.sh"
            ;;
        16)
            run_script "cleanup-xcode.sh"
            ;;
        17)
            run_script "pre-submission-test.sh"
            ;;
        18)
            echo ""
            echo -e "${YELLOW}Choose reset method:${NC}"
            echo "  1) Soft Delete (marks as deleted, keeps data)"
            echo "  2) Hard Delete (permanently removes data)"
            echo -ne "${YELLOW}Enter choice [1-2]:${NC} "
            read method
            if [ "$method" = "1" ]; then
                run_script "soft-delete-leaderboard.sh"
            elif [ "$method" = "2" ]; then
                echo ""
                echo -e "${RED}⚠️  WARNING: Hard Delete${NC}"
                echo -e "${RED}   This will PERMANENTLY DELETE leaderboard entries!${NC}"
                echo ""
                echo -ne "${YELLOW}Continue? (y/N):${NC} "
                read confirm
                if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                    run_script "reset-leaderboard.sh"
                else
                    echo -e "${BLUE}ℹ️  Cancelled${NC}"
                fi
            else
                echo -e "${BLUE}ℹ️  Cancelled${NC}"
            fi
            ;;
        0)
            echo ""
            echo -e "${BLUE}👋 Goodbye!${NC}"
            echo ""
            exit 0
            ;;
        *)
            echo -e "${RED}❌ Invalid choice: $choice${NC}"
            exit 1
            ;;
    esac
}

# Main script logic
if [ $# -eq 0 ]; then
    # No arguments - show menu or run default
    # Check if running interactively
    if [ -t 0 ]; then
        # Interactive mode - show menu
        show_menu
        read choice
        handle_choice "$choice"

        # Ask if user wants to do something else
        echo ""
        echo -ne "${YELLOW}Do something else? (y/N):${NC} "
        read again
        if [ "$again" = "y" ] || [ "$again" = "Y" ]; then
            exec "$0"
        fi
    else
        # Non-interactive mode - run default
        echo -e "${BLUE}🔄 Running default action: Sync web to iOS${NC}"
        run_script "sync-web-to-ios.sh"
    fi
else
    # Arguments provided - run specific choice
    handle_choice "$1"
fi

echo ""
