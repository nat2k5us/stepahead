<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>StepAhead</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#667eea',
                        'primary-dark': '#764ba2'
                    }
                }
            }
        }
    </script>
    <style>
        /* iOS Safe Area Support */
        :root {
            --safe-area-inset-top: env(safe-area-inset-top);
            --safe-area-inset-bottom: env(safe-area-inset-bottom);
        }

        html {
            background: #667eea; /* Fallback for default theme */
            min-height: 100vh;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            min-height: 100vh;
            min-height: -webkit-fill-available;
            width: 100%;
            overflow-x: hidden;
            background: #667eea; /* Fallback color */
            position: relative;
        }

        /* CRITICAL: Remove all default backgrounds */
        * {
            box-sizing: border-box;
        }

        /* Mobile-only styles */
        @media (max-width: 768px) {
            body.app-active {
                overflow: hidden;
                height: 100vh;
                position: fixed;
                width: 100%;
            }

            #mainAppContainer {
                height: 100vh;
                display: flex;
                flex-direction: column;
            }
        }

        /* Mobile Layout - Transparent to show body gradient */
        .mobile-layout {
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
            background: transparent !important;
        }

        /* Main app container with full gradient - SAME AS LOGIN SCREEN */
        #mainAppContainer {
            min-height: 100vh;
            width: 100%;
        }

        /* Apply theme gradient to html, body AND main container for COMPLETE coverage */
        html:has(body.theme-default),
        body.theme-default,
        body.theme-default #mainAppContainer {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        html:has(body.theme-ocean),
        body.theme-ocean,
        body.theme-ocean #mainAppContainer {
            background: linear-gradient(135deg, #2E3192 0%, #1BFFFF 100%);
        }
        html:has(body.theme-sunset),
        body.theme-sunset,
        body.theme-sunset #mainAppContainer {
            background: linear-gradient(135deg, #FA8BFF 0%, #2BD2FF 100%);
        }
        html:has(body.theme-forest),
        body.theme-forest,
        body.theme-forest #mainAppContainer {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
        }
        html:has(body.theme-dark),
        body.theme-dark,
        body.theme-dark #mainAppContainer {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .mobile-app-container {
            background: transparent !important;
        }

        .tab-content,
        .tab-content > div,
        .mobile-content {
            background: transparent !important;
        }

        /* FLOATING Header - NO fixed bar, just floating like debug controls */
        .mobile-header {
            position: fixed;
            top: env(safe-area-inset-top);
            left: 0;
            right: 0;
            padding: 1rem;
            color: white;
            font-size: 1.25rem;
            font-weight: bold;
            text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
            z-index: 100;
            pointer-events: none;
            background: transparent;
        }

        .mobile-header > * {
            pointer-events: auto;
        }

        /* Content Area */
        .mobile-content {
            flex: 1;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
            padding: 1rem;
            padding-top: calc(3.5rem + env(safe-area-inset-top)); /* Space for floating header */
            padding-bottom: calc(90px + env(safe-area-inset-bottom)); /* Space for floating navbar */
        }

        /* FLOATING Bottom Navigation - Rounded pill floating like debug controls */
        .mobile-bottom-nav {
            position: fixed;
            bottom: calc(6px + env(safe-area-inset-bottom));
            left: 24px;
            right: 24px;
            display: flex !important;
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            padding: 0.5rem 0.25rem;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2);
            z-index: 100;
        }

        .nav-item {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.35rem;
            cursor: pointer;
            transition: all 0.3s;
            color: rgba(255, 255, 255, 0.7);
            min-height: 44px;
        }

        .nav-item.active {
            color: white;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 0.5rem;
        }

        .nav-icon {
            font-size: 1.5rem;
            margin-bottom: 0.15rem;
            transition: transform 0.2s;
        }

        .nav-item.active .nav-icon {
            transform: scale(1.05);
        }

        .nav-item > div:not(.nav-icon) {
            font-size: 0.65rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.3px;
        }

        /* Debug Controls - Floating Panel */
        .debug-controls {
            position: fixed;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.85);
            border-radius: 12px;
            padding: 15px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }

        .debug-controls.hidden {
            display: none;
        }

        .debug-btn {
            width: 50px;
            height: 50px;
            background: #667eea;
            border: none;
            border-radius: 8px;
            color: white;
            font-size: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .debug-btn:active {
            transform: scale(0.95);
            background: #5a67d8;
        }

        .debug-toggle {
            position: fixed;
            top: 100px;
            right: 10px;
            background: rgba(255, 0, 0, 0.7);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            color: white;
            font-size: 20px;
            cursor: pointer;
            z-index: 10000;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .debug-info {
            color: white;
            font-size: 11px;
            text-align: center;
            margin-top: 5px;
            font-family: monospace;
        }

        /* Tab Content */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Login Screen */
        .login-screen {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            position: relative;
            z-index: 200; /* Higher than mobile-header/nav (z-index: 100) */
        }

        .login-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 1.5rem;
            padding: 2.5rem;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            position: relative;
            pointer-events: auto;
            z-index: 201; /* Ensure login container is above everything */
        }

        .login-logo {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .login-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1f2937;
            margin-bottom: 2rem;
        }

        .login-input {
            width: 100%;
            padding: 1rem;
            margin-bottom: 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 0.75rem;
            font-size: 1rem;
            transition: all 0.2s;
            background: white;
            pointer-events: auto !important;
            position: relative;
            z-index: 202;
            -webkit-user-select: text;
            user-select: text;
            -webkit-tap-highlight-color: rgba(102, 126, 234, 0.1);
            touch-action: manipulation;
            /* iOS-specific fixes */
            -webkit-appearance: none;
            appearance: none;
        }

        .login-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .login-button {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(135deg, #06b6d4 0%, #3b82f6 100%);
            color: white;
            border: none;
            border-radius: 0.75rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            margin-bottom: 1rem;
            pointer-events: auto !important;
            position: relative;
            z-index: 202;
            -webkit-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(102, 126, 234, 0.2);
            touch-action: manipulation;
            /* iOS-specific fixes */
            -webkit-appearance: none;
            appearance: none;
        }

        .login-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .login-link {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
            pointer-events: auto !important;
            position: relative;
            z-index: 202;
            -webkit-tap-highlight-color: rgba(102, 126, 234, 0.2);
            touch-action: manipulation;
            display: inline-block;
            padding: 0.25rem 0.5rem;
            /* iOS tap target size minimum */
            min-height: 44px;
            min-width: 44px;
        }

        .error-message {
            background: #fee2e2;
            color: #dc2626;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
        }

        .hidden {
            display: none !important;
            pointer-events: none !important;
            visibility: hidden !important;
        }

        /* Ensure fixed elements inside hidden containers are also hidden */
        .hidden * {
            pointer-events: none !important;
        }

        /* Theme Variables - Default (Purple) */
        body.theme-default {
            --theme-primary: #667eea;
            --theme-secondary: #764ba2;
            --theme-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --theme-light: rgba(102, 126, 234, 0.1);
            --theme-text: #667eea;
        }
        body.theme-ocean {
            --theme-primary: #2E3192;
            --theme-secondary: #1BFFFF;
            --theme-gradient: linear-gradient(135deg, #2E3192 0%, #1BFFFF 100%);
            --theme-light: rgba(27, 255, 255, 0.1);
            --theme-text: #2E3192;
        }
        body.theme-sunset {
            --theme-primary: #FA8BFF;
            --theme-secondary: #2BD2FF;
            --theme-gradient: linear-gradient(135deg, #FA8BFF 0%, #2BD2FF 100%);
            --theme-light: rgba(250, 139, 255, 0.1);
            --theme-text: #FA8BFF;
        }
        body.theme-forest {
            --theme-primary: #56ab2f;
            --theme-secondary: #a8e063;
            --theme-gradient: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
            --theme-light: rgba(86, 171, 47, 0.1);
            --theme-text: #56ab2f;
        }
        body.theme-dark {
            --theme-primary: #1a1a2e;
            --theme-secondary: #16213e;
            --theme-gradient: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            --theme-light: rgba(26, 26, 46, 0.1);
            --theme-text: #1a1a2e;
        }

        /* Apply theme to components */
        .login-screen {
            background: var(--theme-gradient);
        }

        .login-button {
            background: var(--theme-gradient);
        }

        .nav-item.active {
            color: var(--theme-text);
            background: var(--theme-light);
        }

        /* Theme for headings - white on gradient background */
        .tab-content h2,
        .tab-content h3 {
            color: white !important;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            font-weight: 700;
        }

        /* Theme for buttons */
        button.login-button:hover {
            opacity: 0.9;
        }

        /* Theme for active states */
        .nav-icon {
            transition: all 0.3s ease;
        }

        .nav-item.active .nav-icon {
            filter: brightness(1.1);
        }

        /* Theme for links and interactive elements */
        .login-link {
            color: var(--theme-text);
        }

        /* Theme for toggle switches */
        input[type="checkbox"]:checked + div {
            background: var(--theme-primary) !important;
        }

        /* Theme for focus states */
        .login-input:focus {
            border-color: var(--theme-primary);
            box-shadow: 0 0 0 3px var(--theme-light);
        }

        /* Theme for cards with hover effects */
        .bg-white.rounded-xl.shadow {
            transition: box-shadow 0.3s ease, transform 0.2s ease;
        }

        .bg-white.rounded-xl.shadow:hover {
            box-shadow: 0 10px 25px var(--theme-light);
        }

        /* Theme for the selected theme button border */
        .theme-selected {
            border: 3px solid var(--theme-primary) !important;
            box-shadow: 0 0 0 2px var(--theme-light), 0 4px 12px rgba(0,0,0,0.2) !important;
        }

        /* Gradients now applied to #mainAppContainer instead of body */


        /* Theme cards with semi-transparent white/blur */
        .bg-white.rounded-xl,
        .bg-white.rounded-lg {
            background: rgba(255, 255, 255, 0.9) !important;
            backdrop-filter: blur(20px) !important;
            -webkit-backdrop-filter: blur(20px) !important;
        }

        /* All main section headers white on gradient */
        .tab-content h2 {
            color: white !important;
            text-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
        }

        /* Card headers stay dark */
        .bg-white h3 {
            color: #1f2937 !important;
            text-shadow: none !important;
        }

        /* Logout button themed */
        .bg-red-500 {
            background: rgba(239, 68, 68, 0.95) !important;
            backdrop-filter: blur(10px);
        }

        /* Theme for text accents */
        .text-purple, .font-bold.text-purple {
            color: var(--theme-text) !important;
        }

        /* Theme for dividers */
        .border-gray-200 {
            border-color: var(--theme-light) !important;
        }

        /* Theme transitions */
        * {
            transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        }

        /* Don't transition positions and transforms */
        .nav-item, .mobile-bottom-nav, .debug-controls {
            transition: background-color 0.3s ease, color 0.3s ease !important;
        }

        /* Theme for Save Changes button */
        button.login-button, .login-button {
            background: var(--theme-gradient);
            border: none;
            box-shadow: 0 4px 12px var(--theme-light);
        }

        button.login-button:active {
            transform: scale(0.98);
            box-shadow: 0 2px 6px var(--theme-light);
        }

        /* Theme for profile display text */
        #profileDisplayName {
            color: #1f2937 !important;
        }

        /* Card headers stay dark for readability on white cards */
        .bg-white h3.text-lg.font-semibold {
            color: #1f2937 !important;
            text-shadow: none;
        }

    /* ==================================================
    STEPAHEAD TASK STYLES
    ================================================== */
    .day-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        padding: 10px;
    }

    .day-button {
        padding: 30px;
        font-size: 1.5rem;
        font-weight: bold;
        background: white;
        border: none;
        border-radius: 15px;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        color: #667eea;
        text-align: center;
    }

    .day-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }

    .task-grid {
        display: grid;
        gap: 15px;
    }

    .task-button {
        padding: 20px;
        background: white;
        border: none;
        border-radius: 15px;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        text-align: left;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .task-button:hover {
        transform: translateY(-3px);
    }

    .task-icon {
        font-size: 2.5rem;
    }

    .task-info {
        flex: 1;
    }

    .task-title {
        font-size: 1.3rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 5px;
    }

    .task-steps {
        font-size: 1rem;
        color: #666;
    }

    .task-view {
        padding: 20px;
        padding-bottom: 100px;
    }

    .task-card {
        background: white !important;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        text-align: center;
    }

    .task-emoji {
        font-size: 4rem;
        margin-bottom: 15px;
    }

    .task-name {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    .step-counter {
        font-size: 1.1rem;
        color: #666;
        margin-bottom: 30px;
    }

    .step-box {
        background: #f8f9fa;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        min-height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .step-text {
        font-size: 1.5rem;
        color: #333;
        line-height: 1.6;
    }

    .progress-dots {
        display: flex;
        gap: 10px;
        margin-bottom: 25px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .progress-dot {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background: #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1rem;
        font-weight: bold;
    }

    .progress-dot.completed {
        background: #4CAF50;
    }

    .button-group {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .nav-button {
        padding: 15px 30px;
        font-size: 1.2rem;
        color: white;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .nav-button.prev {
        background: #6c757d;
    }

    .nav-button.next {
        background: #007bff;
    }

    .nav-button.complete {
        background: #28a745;
        animation: pulse-task 1.5s infinite;
    }

    @keyframes pulse-task {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    .stepahead-back-button {
        padding: 12px 24px;
        font-size: 1rem;
        background: white;
        color: #667eea;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        margin-bottom: 20px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        font-weight: 600;
    }

    .task-count {
        font-size: 0.9rem;
        margin-top: 8px;
        color: #666;
    }

    /* Timer warning animation */
    .timer-warning {
        color: #e74c3c !important;
        animation: timerPulse 1s ease-in-out infinite;
    }

    /* Timer overtime (negative) state */
    .timer-overtime {
        color: #c0392b !important;
        animation: overtimePulse 0.5s ease-in-out infinite;
    }

    @keyframes timerPulse {
        0%, 100% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(1.1);
            opacity: 0.8;
        }
    }

    @keyframes overtimePulse {
        0%, 100% {
            transform: scale(1);
            opacity: 0.9;
        }
        50% {
            transform: scale(1.15);
            opacity: 1;
        }
    }
    </style>
</head>
<body class="theme-default">
    <script>
        console.log('🌟 BODY LOADED - HTML is parsing');
        console.log('Login screen element:', document.getElementById('loginScreen'));
        console.log('Document ready state:', document.readyState);
    </script>

    <!-- Login Screen -->
    <div class="login-screen" id="loginScreen">
        <div class="login-container">
            <!-- Logo and Title -->
            <div style="text-align: center;">
                <div class="login-logo">🏠</div>
                <h1 class="login-title">StepAhead</h1>
            </div>

            <!-- Error Message -->
            <div id="errorMessage" class="error-message hidden"></div>

            <!-- Login Form -->
            <div id="loginForm">
                <input type="email" id="loginEmail" placeholder="EMAIL" class="login-input" autocomplete="email">
                <input type="password" id="loginPassword" placeholder="PASSWORD" class="login-input" autocomplete="current-password">
                <button onclick="signIn()" class="login-button">SIGN IN</button>
                <div style="text-align: center; color: #6b7280;">
                    Don't have an account? <a href="#" onclick="showSignup(); return false;" class="login-link">Create one</a>
                </div>
            </div>

            <!-- Signup Form -->
            <div id="signupForm" class="hidden">
                <input type="text" id="signupName" placeholder="FULL NAME" class="login-input" autocomplete="name">
                <input type="email" id="signupEmail" placeholder="EMAIL" class="login-input" autocomplete="email">
                <input type="password" id="signupPassword" placeholder="PASSWORD" class="login-input" autocomplete="new-password">
                <button onclick="signUp()" class="login-button">CREATE ACCOUNT</button>
                <div style="text-align: center; color: #6b7280;">
                    Already have an account? <a href="#" onclick="showLogin(); return false;" class="login-link">Sign in</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Main App Container -->
    <div id="mainAppContainer" class="hidden">
        <!-- Mobile Layout -->
        <div class="mobile-layout">
            <!-- Header -->
            <div class="mobile-header">
                <div class="flex justify-between items-center">
                    <h1 class="text-xl font-bold">StepAhead</h1>
                    <div class="text-sm">
                        Welcome, <span id="userName">User</span>
                    </div>
                </div>
            </div>

            <!-- Content Area -->
            <div class="mobile-content">
                <!-- Tab Content Areas -->
                <div class="tab-content active" id="homeTab">
                    <div id="homeTabContent">
                        <!-- Content will be dynamically generated by renderHomeTab() -->
                    </div>
                </div>

                <div class="tab-content" id="historyTab">
                    <div class="p-4" id="historyTabContent">
                        <h2 class="text-2xl font-bold mb-4">📊 Task History</h2>
                        <div class="bg-white rounded-lg shadow p-6">
                            <p class="text-gray-700">Loading your task history...</p>
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="favoritesTab">
                    <div class="p-4">
                        <h2 class="text-2xl font-bold mb-4">Favorites</h2>
                        <div class="bg-white rounded-lg shadow p-6">
                            <p class="text-gray-700">Favorites content goes here.</p>
                            <p class="text-gray-600 mt-2">Build your features in this section.</p>
                        </div>
                        <!-- Add your custom content for this tab -->
                    </div>
                </div>

                <div class="tab-content" id="profileTab">
                    <div class="p-4" style="padding-bottom: 100px;">
                        <!-- Profile Header -->
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-xl font-bold">Profile</h2>
                            <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded-lg font-semibold text-sm shadow-lg hover:bg-red-600">
                                Logout
                            </button>
                        </div>

                        <!-- User Info Card -->
                        <div class="bg-white rounded-xl shadow mb-4 p-4">
                            <div class="text-center mb-4">
                                <div class="text-4xl mb-2">👤</div>
                                <div class="text-xl font-bold text-gray-900" id="profileDisplayName">Developer</div>
                                <div class="text-sm text-gray-600 mt-1" id="profileDisplayEmail">dev@test.local</div>
                            </div>

                            <!-- Editable fields -->
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Display Name</label>
                                <input type="text" id="profileName" class="login-input" placeholder="Your name">
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                <input type="email" id="profileEmail" class="login-input" readonly style="background: #f3f4f6;">
                            </div>
                            <button onclick="saveProfile()" class="login-button">Save Changes</button>
                        </div>

                        <!-- App Settings Card -->
                        <div class="bg-white rounded-xl shadow p-4 mb-4">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">⚙️ App Settings</h3>

                            <!-- Theme Selector -->
                            <div class="mb-4">
                                <label class="block text-sm font-semibold text-gray-700 mb-3">🎨 Theme</label>
                                <div class="flex justify-center gap-3">
                                    <div onclick="changeTheme('theme-default')" class="cursor-pointer relative" id="theme-default-btn">
                                        <div class="w-12 h-12 rounded-full" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: 3px solid #e5e7eb; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
                                    </div>
                                    <div onclick="changeTheme('theme-ocean')" class="cursor-pointer relative" id="theme-ocean-btn">
                                        <div class="w-12 h-12 rounded-full" style="background: linear-gradient(135deg, #2E3192 0%, #1BFFFF 100%); border: 3px solid #e5e7eb; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
                                    </div>
                                    <div onclick="changeTheme('theme-sunset')" class="cursor-pointer relative" id="theme-sunset-btn">
                                        <div class="w-12 h-12 rounded-full" style="background: linear-gradient(135deg, #FA8BFF 0%, #2BD2FF 100%); border: 3px solid #e5e7eb; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
                                    </div>
                                    <div onclick="changeTheme('theme-forest')" class="cursor-pointer relative" id="theme-forest-btn">
                                        <div class="w-12 h-12 rounded-full" style="background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%); border: 3px solid #e5e7eb; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
                                    </div>
                                    <div onclick="changeTheme('theme-dark')" class="cursor-pointer relative" id="theme-dark-btn">
                                        <div class="w-12 h-12 rounded-full" style="background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%); border: 3px solid #e5e7eb; box-shadow: 0 2px 8px rgba(0,0,0,0.15);"></div>
                                    </div>
                                </div>
                                <p class="text-xs text-gray-600 mt-3 text-center">Choose your app theme</p>
                            </div>

                            <!-- Notifications Toggle -->
                            <div class="mb-4 pt-4 border-t border-gray-200">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <label class="block text-sm font-semibold text-gray-700">🔔 Notifications</label>
                                        <p class="text-xs text-gray-600 mt-1">Enable push notifications</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" id="notificationsToggle" onchange="toggleNotifications(this.checked)" class="sr-only peer">
                                        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600"></div>
                                    </label>
                                </div>
                            </div>

                            <!-- Dark Mode Toggle -->
                            <div class="mb-4 pt-4 border-t border-gray-200">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <label class="block text-sm font-semibold text-gray-700">🌙 Dark Mode</label>
                                        <p class="text-xs text-gray-600 mt-1">Use dark theme</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" id="darkModeToggle" onchange="toggleDarkMode(this.checked)" class="sr-only peer">
                                        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600"></div>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- System Info Card -->
                        <div class="bg-white rounded-xl shadow p-4 mb-4">
                            <h3 class="text-lg font-semibold text-gray-900 mb-3">ℹ️ System Info</h3>
                            <div class="space-y-2 text-sm text-gray-600">
                                <div class="flex justify-between py-2 border-b border-gray-200">
                                    <span>App Version</span>
                                    <span class="font-semibold text-gray-900">1.0.0</span>
                                </div>
                                <div class="flex justify-between py-2 border-b border-gray-200">
                                    <span>Build</span>
                                    <span class="font-semibold text-gray-900">Template v1</span>
                                </div>
                                <div class="flex justify-between py-2">
                                    <span>Platform</span>
                                    <span class="font-semibold text-gray-900" id="platformInfo">iOS</span>
                                </div>
                            </div>
                        </div>

                        <!-- Add your custom profile/settings content -->
                    </div>
                </div>
            </div>

            <!-- Mobile Bottom Navigation -->
            <div class="mobile-bottom-nav">
                <div class="nav-item active" onclick="switchTab('home', this)">
                    <div class="nav-icon">🏠</div>
                    <div>Home</div>
                </div>
                <div class="nav-item" onclick="switchTab('history', this)">
                    <div class="nav-icon">📊</div>
                    <div>History</div>
                </div>
                <div class="nav-item" onclick="switchTab('favorites', this)">
                    <div class="nav-icon">⭐</div>
                    <div>Favorites</div>
                </div>
                <div class="nav-item" onclick="switchTab('profile', this)">
                    <div class="nav-icon">👤</div>
                    <div>Profile</div>
                </div>
            </div>
        </div>

        <!-- Debug Controls Toggle Button -->
        <button class="debug-toggle" onclick="toggleDebugControls()">🐛</button>

        <!-- Debug Controls Panel -->
        <div class="debug-controls hidden" id="debugControls">
            <button class="debug-btn" onclick="moveNavbar('up')">⬆️</button>
            <button class="debug-btn" onclick="moveNavbar('down')">⬇️</button>
            <button class="debug-btn" onclick="resetNavbar()">↩️</button>
            <div class="debug-info" id="debugInfo">Bottom: 0px</div>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-app.js";
        import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut, updateProfile, indexedDBLocalPersistence, initializeAuth } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-auth.js";
        import { getFirestore, doc, setDoc, getDoc } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore.js";

        // Firebase Configuration
        const firebaseConfig = {
          apiKey: "AIzaSyDpD1Vv3WsRjB2g7zZjohO3I24sMJsHLGw",
          authDomain: "stepahead-519b0.firebaseapp.com",
          projectId: "stepahead-519b0",
          storageBucket: "stepahead-519b0.firebasestorage.app",
          messagingSenderId: "335105043215",
          appId: "1:335105043215:web:stepahead"
        };

        const app = initializeApp(firebaseConfig);

        // Use default auth (no persistence for now to debug)
        const auth = getAuth(app);
        const db = getFirestore(app);

        console.log('🔥 Firebase initialized');
        console.log('Auth:', auth);
        console.log('DB:', db);

        // Make functions globally available
        window.auth = auth;
        window.db = db;
        window.doc = doc;
        window.setDoc = setDoc;
        window.getDoc = getDoc;
        window.signOut = signOut;
        window.updateProfile = updateProfile;
        window.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
        window.signInWithEmailAndPassword = signInWithEmailAndPassword;

        console.log('✅ Firebase functions exposed to window');

        // Expose app functions to window object for onclick handlers
        // These will be defined later but are hoisted in function declarations
        window.signIn = function() { return signIn(); };
        window.signUp = function() { return signUp(); };
        window.logout = function() { return logout(); };
        window.saveProfile = function() { return saveProfile(); };
        window.showSignup = function() { return showSignup(); };
        window.showLogin = function() { return showLogin(); };
        window.changeTheme = function(themeName) { return changeTheme(themeName); };
        window.switchTab = function(tabId, element) { return switchTab(tabId, element); };
        window.toggleDebugControls = function() { return toggleDebugControls(); };
        window.moveNavbar = function(direction) { return moveNavbar(direction); };
        window.resetNavbar = function() { return resetNavbar(); };
        window.showTasksView = function(dayNumber) { return showTasksView(dayNumber); };
        window.showDaysView = function() { return showDaysView(); };
        window.showTaskView = function(taskIndex) { return showTaskView(taskIndex); };
        window.addBonusTask = function(dayNumber) { return addBonusTask(dayNumber); };
        window.handleStepComplete = function() { return handleStepComplete(); };
        window.prevStep = function() { return prevStep(); };
        window.nextStep = function() { return nextStep(); };
        window.completeTask = function() { return completeTask(); };
        window.renderHistoryTab = function() { return renderHistoryTab(); };
        window.showTaskDetails = function(taskId) { return showTaskDetails(taskId); };
        window.bypassFirebaseLogin = function() { return bypassFirebaseLogin(); };

        console.log('✅ App functions exposed to window');

        // Force login screen to be interactive
        function ensureLoginScreenClickable() {
            const loginScreen = document.getElementById('loginScreen');
            const mainApp = document.getElementById('mainAppContainer');

            console.log('🔍 Login screen exists:', !!loginScreen);
            console.log('🔍 Login screen hidden?', loginScreen?.classList.contains('hidden'));
            console.log('🔍 Main app exists:', !!mainApp);

            // Always apply fixes, regardless of hidden state
            if (loginScreen) {
                console.log('🔧 Applying login screen fixes');
                loginScreen.style.zIndex = '9999';
                loginScreen.style.position = 'relative';
                loginScreen.style.pointerEvents = 'auto';
            }

            // Force hide main app completely
            if (mainApp) {
                console.log('🔧 Hiding main app container');
                mainApp.style.display = 'none';
                mainApp.style.visibility = 'hidden';
                mainApp.style.pointerEvents = 'none';
            }
        }

        // Wait for DOM to be fully loaded before fixing login screen
        console.log('🚨 Running immediate login screen fix...');
        if (document.readyState === 'loading') {
            console.log('⏳ DOM still loading, waiting for DOMContentLoaded...');
            document.addEventListener('DOMContentLoaded', () => {
                console.log('✅ DOM loaded, applying fixes');
                setTimeout(() => ensureLoginScreenClickable(), 100);
            });
        } else {
            console.log('✅ DOM already loaded, applying fixes immediately');
            setTimeout(() => ensureLoginScreenClickable(), 100);
        }

        // Auth state listener
        console.log('👂 Setting up auth state listener...');
        onAuthStateChanged(auth, async (user) => {
            console.log('🔔 Auth state changed, user:', user ? user.email : 'null');

            // Ensure login screen is clickable when showing
            if (!user) {
                setTimeout(() => ensureLoginScreenClickable(), 100);
            }

            if (user) {
                console.log('🔐 User authenticated:', user.email);

                // User is signed in - show app immediately
                document.getElementById('loginScreen').classList.add('hidden');
                document.getElementById('mainAppContainer').classList.remove('hidden');
                document.body.classList.add('app-active');

                // Try to load user profile from Firestore
                let userName = user.email.split('@')[0]; // Default fallback
                let userTheme = 'theme-default'; // Default theme

                try {
                    const userDoc = await getDoc(doc(db, 'users', user.uid));
                    if (userDoc.exists()) {
                        const userData = userDoc.data();
                        userName = userData.displayName || userName;
                        userTheme = userData.theme || 'theme-default';
                        console.log('✅ Loaded user profile from Firestore');
                    } else {
                        console.log('⚠️  No Firestore profile found, using email prefix');
                    }
                } catch (firestoreError) {
                    console.warn('⚠️  Firestore read failed, using fallback:', firestoreError.message);
                    // Continue with fallback - don't block login
                }

                // Update UI with user info
                document.getElementById('userName').textContent = userName;
                document.getElementById('profileName').value = userName;
                document.getElementById('profileEmail').value = user.email;

                // Update profile display (header in profile tab)
                const profileDisplayName = document.getElementById('profileDisplayName');
                const profileDisplayEmail = document.getElementById('profileDisplayEmail');
                if (profileDisplayName) {
                    profileDisplayName.textContent = userName;
                }
                if (profileDisplayEmail) {
                    profileDisplayEmail.textContent = user.email;
                }

                // Load user's theme preference
                changeTheme(userTheme);
                console.log('🎨 Loaded user theme:', userTheme);

                // Initialize StepAhead content
                console.log('🏠 Calling renderHomeTab...');
                if (typeof window.renderHomeTab === 'function') {
                    window.renderHomeTab();
                } else {
                    console.error('❌ renderHomeTab not found on window!');
                }

                console.log('✅ App loaded successfully');
            } else {
                // User is signed out
                console.log('👋 User signed out');
                document.getElementById('loginScreen').classList.remove('hidden');
                document.getElementById('mainAppContainer').classList.add('hidden');
                document.body.classList.remove('app-active');
            }
        });
    </script>

    <script>
    console.log('🚀 Second script started loading');

    // Declare functions that will be exposed to window globally
    // This ensures they're accessible from the module script above

    // ==================================================
    // STEPAHEAD TASK DATA
    // ==================================================
    const tasks = {
      1: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          stepDurations: [30, 20, 15, 10], // seconds for each step
          color: "#E8F4F8"
        },
        {
          name: "Wash Your Breakfast Dishes",
          icon: "🍽️",
          steps: [
            "Scrape any leftover food into the trash",
            "Turn on warm water",
            "Put dish soap on a sponge",
            "Scrub each dish clean",
            "Rinse with clean water",
            "Place in the dish rack to dry"
          ],
          stepDurations: [20, 10, 15, 60, 30, 20], // seconds for each step
          color: "#FFF4E6"
        },
        {
          name: "Water One Plant",
          icon: "🌱",
          steps: [
            "Get a cup of water",
            "Find one plant in your home",
            "Feel the soil - is it dry?",
            "Slowly pour water until soil is damp",
            "You helped something grow today!"
          ],
          stepDurations: [15, 30, 20, 30, 10], // seconds for each step
          color: "#E8F8F5"
        }
      ],
      2: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          color: "#E8F4F8"
        },
        {
          name: "Take Out the Trash",
          icon: "🗑️",
          steps: [
            "Tie the trash bag closed",
            "Lift the bag out of the trash can",
            "Walk to your outside trash bin",
            "Put the bag in the bin",
            "Put a new bag in your trash can",
            "Wash your hands"
          ],
          color: "#F0F4FF"
        },
        {
          name: "Wipe the Kitchen Counter",
          icon: "✨",
          steps: [
            "Get a clean cloth or paper towel",
            "Spray cleaner OR wet the cloth with water",
            "Wipe the counter from left to right",
            "Get any crumbs or spills",
            "Look at your clean counter - nice work!"
          ],
          color: "#FFF0F5"
        },
        {
          name: "Put Away 5 Things",
          icon: "📦",
          steps: [
            "Look around for things that are out of place",
            "Pick up one thing and put it where it belongs",
            "Do this 4 more times (5 things total)",
            "Your space looks better already!"
          ],
          color: "#F5F0FF"
        }
      ],
      3: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          color: "#E8F4F8"
        },
        {
          name: "Wash Your Lunch Dishes",
          icon: "🍴",
          steps: [
            "Scrape any leftover food into the trash",
            "Turn on warm water",
            "Put dish soap on a sponge",
            "Scrub each dish clean",
            "Rinse with clean water",
            "Place in the dish rack to dry"
          ],
          color: "#FFF4E6"
        },
        {
          name: "Sweep the Kitchen Floor",
          icon: "🧹",
          steps: [
            "Get your broom and dustpan",
            "Start in one corner of the kitchen",
            "Sweep dirt into a pile",
            "Use the dustpan to pick up the pile",
            "Put dirt in the trash",
            "Put broom and dustpan away"
          ],
          color: "#E8F8F5"
        },
        {
          name: "Sort Your Mail",
          icon: "📮",
          steps: [
            "Get any mail from today",
            "Make 2 piles: important and not important",
            "Put important mail in one spot",
            "Recycle junk mail",
            "You're organized!"
          ],
          color: "#F0F4FF"
        },
        {
          name: "Change Your Hand Towel",
          icon: "🧴",
          steps: [
            "Take the used towel off the rack",
            "Put it in the laundry",
            "Get a clean towel",
            "Hang the clean towel on the rack",
            "Fresh towel ready!"
          ],
          color: "#FFF0F5"
        }
      ],
      4: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          color: "#E8F4F8"
        },
        {
          name: "Empty the Dishwasher",
          icon: "🍽️",
          steps: [
            "Open the dishwasher",
            "Touch a dish - is it dry and cool?",
            "Put away all the plates",
            "Put away all the cups",
            "Put away all the silverware",
            "Put away any other dishes",
            "Close the empty dishwasher"
          ],
          color: "#FFF4E6"
        },
        {
          name: "Water Your Plants",
          icon: "💧",
          steps: [
            "Get your watering can or cup",
            "Fill it with water",
            "Go to each plant",
            "Give each one a drink of water",
            "Plants are happy!"
          ],
          color: "#E8F8F5"
        },
        {
          name: "Wipe Down the Bathroom Sink",
          icon: "🚰",
          steps: [
            "Get a cloth or paper towel",
            "Spray cleaner OR wet with water",
            "Wipe the sink and faucet",
            "Wipe around the sink edges",
            "Throw away paper towel OR rinse cloth",
            "Shiny and clean!"
          ],
          color: "#F0F4FF"
        },
        {
          name: "Take Out Recycling",
          icon: "♻️",
          steps: [
            "Gather items to recycle",
            "Take them to your recycling bin",
            "Put them in the bin",
            "Put a new bag in if needed",
            "Great job recycling!"
          ],
          color: "#FFF0F5"
        },
        {
          name: "Fold 3 Pieces of Laundry",
          icon: "👕",
          steps: [
            "Find clean laundry that needs folding",
            "Pick one piece and fold it",
            "Do this 2 more times (3 pieces total)",
            "Put folded items away OR in a neat pile",
            "Good work!"
          ],
          color: "#F5F0FF"
        }
      ],
      5: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          color: "#E8F4F8"
        },
        {
          name: "Vacuum One Room",
          icon: "🏠",
          steps: [
            "Get the vacuum cleaner",
            "Plug it in",
            "Turn it on",
            "Push it back and forth across the floor",
            "Get the whole room",
            "Turn off and put away vacuum",
            "Room looks great!"
          ],
          color: "#FFF4E6"
        },
        {
          name: "Clean the Toilet",
          icon: "🚽",
          steps: [
            "Put on gloves if you have them",
            "Squirt toilet cleaner inside the bowl",
            "Use the toilet brush to scrub",
            "Flush the toilet",
            "Wipe the seat with a disinfecting wipe",
            "Throw away wipe and wash hands",
            "Clean toilet!"
          ],
          color: "#E8F8F5"
        },
        {
          name: "Organize Your Desk",
          icon: "📝",
          steps: [
            "Clear everything off your desk",
            "Wipe the desk surface",
            "Put back only what you need",
            "Throw away any trash",
            "Neat desk, clear mind!"
          ],
          color: "#F0F4FF"
        },
        {
          name: "Change Your Bedsheets",
          icon: "🛏️",
          steps: [
            "Take off all sheets and pillowcases",
            "Put them in the laundry",
            "Get clean sheets",
            "Put the fitted sheet on the mattress",
            "Put the flat sheet on top",
            "Add clean pillowcases",
            "Arrange blanket and pillows",
            "Fresh bed!"
          ],
          color: "#FFF0F5"
        },
        {
          name: "Dust 3 Surfaces",
          icon: "✨",
          steps: [
            "Get a dust cloth or duster",
            "Pick one surface (table, shelf, etc)",
            "Wipe off the dust",
            "Do this for 2 more surfaces",
            "Less dust, more fresh air!"
          ],
          color: "#F5F0FF"
        },
        {
          name: "Organize One Drawer",
          icon: "🗄️",
          steps: [
            "Pick one drawer to organize",
            "Take everything out",
            "Throw away anything you don't need",
            "Put things back in neat groups",
            "Close the drawer - so organized!"
          ],
          color: "#FFFACD"
        }
      ],
      6: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          color: "#E8F4F8"
        },
        {
          name: "Mop the Kitchen Floor",
          icon: "🧽",
          steps: [
            "Sweep the floor first if needed",
            "Get your mop and bucket",
            "Fill bucket with water and cleaner",
            "Dip mop in water and squeeze out extra",
            "Mop the floor in sections",
            "Let floor dry",
            "Empty bucket and put mop away",
            "Sparkling floor!"
          ],
          color: "#FFF4E6"
        },
        {
          name: "Clean the Microwave",
          icon: "📦",
          steps: [
            "Take out the glass plate",
            "Wash the plate with soap and water",
            "Spray inside of microwave with cleaner",
            "Wipe inside with a cloth",
            "Put the clean plate back",
            "Wipe the outside too",
            "Clean microwave!"
          ],
          color: "#E8F8F5"
        },
        {
          name: "Wash Your Bathroom Towels",
          icon: "🧺",
          steps: [
            "Gather all bathroom towels",
            "Put them in the washing machine",
            "Add detergent",
            "Start the wash cycle",
            "When done, put in dryer or hang to dry",
            "Fresh clean towels coming!"
          ],
          color: "#F0F4FF"
        },
        {
          name: "Wipe All Door Handles",
          icon: "🚪",
          steps: [
            "Get a disinfecting wipe",
            "Go to each room",
            "Wipe every door handle",
            "Don't forget bathroom and fridge!",
            "Cleaner, healthier home!"
          ],
          color: "#FFF0F5"
        },
        {
          name: "Clean Your Bathroom Mirror",
          icon: "🪞",
          steps: [
            "Get glass cleaner and paper towels",
            "Spray mirror with cleaner",
            "Wipe in circles",
            "Keep wiping until no streaks",
            "Clear reflection!"
          ],
          color: "#F5F0FF"
        },
        {
          name: "Organize Under Your Sink",
          icon: "🚰",
          steps: [
            "Take everything out from under sink",
            "Throw away empty bottles",
            "Wipe the inside of the cabinet",
            "Put things back in groups",
            "Nice and organized!"
          ],
          color: "#FFFACD"
        },
        {
          name: "Straighten the Living Room",
          icon: "🛋️",
          steps: [
            "Fluff the couch cushions",
            "Fold blankets",
            "Put away any items that don't belong",
            "Arrange decorations nicely",
            "Tidy space!"
          ],
          color: "#FFE4E1"
        }
      ],
      7: [
        {
          name: "Make Your Bed",
          icon: "🛏️",
          steps: [
            "Pull the blanket and sheets up to the pillows",
            "Smooth out any wrinkles with your hands",
            "Arrange the pillows at the top",
            "Step back and look - you did it!"
          ],
          color: "#E8F4F8"
        },
        {
          name: "Deep Clean the Fridge",
          icon: "❄️",
          steps: [
            "Take out all food from one shelf",
            "Check dates - throw away old food",
            "Spray cleaner on shelf",
            "Wipe shelf clean",
            "Put food back",
            "Do this for each shelf",
            "Wipe outside of fridge",
            "Clean fridge!"
          ],
          color: "#FFF4E6"
        },
        {
          name: "Vacuum All Rooms",
          icon: "🏡",
          steps: [
            "Get the vacuum cleaner",
            "Start in bedroom",
            "Vacuum entire room",
            "Move to next room",
            "Keep going until all rooms done",
            "Put vacuum away",
            "All rooms clean!"
          ],
          color: "#E8F8F5"
        },
        {
          name: "Clean the Bathroom Completely",
          icon: "🛁",
          steps: [
            "Clean the toilet (bowl and outside)",
            "Clean the sink and counter",
            "Clean the mirror",
            "Clean the tub or shower",
            "Sweep and mop the floor",
            "Put out fresh towels",
            "Empty trash",
            "Bathroom sparkles!"
          ],
          color: "#F0F4FF"
        },
        {
          name: "Dust Everything",
          icon: "🌟",
          steps: [
            "Get your duster or cloth",
            "Dust all surfaces in living room",
            "Dust all surfaces in bedroom",
            "Don't forget shelves and electronics",
            "Dust light fixtures",
            "So much cleaner!"
          ],
          color: "#FFF0F5"
        },
        {
          name: "Do a Load of Laundry",
          icon: "👔",
          steps: [
            "Gather dirty clothes",
            "Sort by colors if needed",
            "Put clothes in washing machine",
            "Add detergent",
            "Start the wash",
            "When done, move to dryer or hang",
            "Fold when dry",
            "Put away clothes",
            "Laundry complete!"
          ],
          color: "#F5F0FF"
        },
        {
          name: "Clean All Windows",
          icon: "🪟",
          steps: [
            "Get glass cleaner and paper towels",
            "Spray one window",
            "Wipe clean in circles",
            "Check for streaks",
            "Move to next window",
            "Do all windows in home",
            "See the world clearly!"
          ],
          color: "#FFFACD"
        },
        {
          name: "Organize Your Closet",
          icon: "👗",
          steps: [
            "Take out clothes you don't wear",
            "Put them in a donation bag",
            "Hang up clothes neatly",
            "Fold items on shelves",
            "Line up shoes",
            "Step back and admire your organized closet!"
          ],
          color: "#FFE4E1"
        },
        {
          name: "Take Out All Trash and Recycling",
          icon: "🗑️",
          steps: [
            "Go to each room with trash",
            "Take out all trash bags",
            "Take them to outside bins",
            "Put new bags in all trash cans",
            "Gather all recycling",
            "Take to recycling bin",
            "All fresh bags!"
          ],
          color: "#E0FFFF"
        }
      ]
    };

    // ==================================================
    // STEPAHEAD TASK MANAGEMENT
    // ==================================================
    let currentDay = null;
    let currentTaskIndex = null;
    let currentStep = 0;
    let currentView = 'days'; // 'days', 'tasks', or 'task'

    // Timer and voice control variables
    let stepTimer = null;
    let timeRemaining = 0;
    let recognition = null;
    let isVoiceEnabled = false;

    // Task performance tracking
    let currentTaskStartTime = null;
    let currentStepStartTime = null;
    let taskPerformanceData = {
        stepTimes: [],      // Actual time taken for each step
        estimatedTimes: [], // Expected time for each step
        totalScore: 0       // Calculated score
    };

    // Initialize speech recognition
    function initVoiceRecognition() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = false;
            recognition.lang = 'en-US';

            recognition.onresult = (event) => {
                const transcript = event.results[event.results.length - 1][0].transcript.toLowerCase().trim();
                console.log('🎤 Voice command:', transcript);

                // Check for completion commands
                if (transcript.includes('done') ||
                    transcript.includes('next') ||
                    transcript.includes('complete') ||
                    transcript.includes('ok')) {
                    handleStepComplete();
                }
            };

            recognition.onerror = (event) => {
                console.error('🎤 Voice recognition error:', event.error);
            };

            console.log('✅ Voice recognition initialized');
        } else {
            console.log('⚠️  Voice recognition not supported in this browser');
        }
    }

    // Text-to-speech function
    function speak(text) {
        if ('speechSynthesis' in window) {
            // Cancel any ongoing speech
            window.speechSynthesis.cancel();

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.rate = 0.9; // Slightly slower for clarity
            utterance.pitch = 1;
            utterance.volume = 1;

            window.speechSynthesis.speak(utterance);
            console.log('🔊 Speaking:', text);
        } else {
            console.log('⚠️  Text-to-speech not supported in this browser');
        }
    }

    // Start voice recognition
    function startVoiceRecognition() {
        if (recognition && !isVoiceEnabled) {
            try {
                recognition.start();
                isVoiceEnabled = true;
                console.log('🎤 Voice recognition started');
            } catch (error) {
                console.error('🎤 Failed to start voice recognition:', error);
            }
        }
    }

    // Stop voice recognition
    function stopVoiceRecognition() {
        if (recognition && isVoiceEnabled) {
            recognition.stop();
            isVoiceEnabled = false;
            console.log('🎤 Voice recognition stopped');
        }
    }

    // Start step timer
    function startStepTimer(duration) {
        // Clear any existing timer
        if (stepTimer) {
            clearInterval(stepTimer);
        }

        timeRemaining = duration;
        currentStepStartTime = Date.now();
        updateTimerDisplay();

        stepTimer = setInterval(() => {
            timeRemaining--;
            updateTimerDisplay();

            // Only announce once when hitting zero
            if (timeRemaining === 0) {
                speak("Time is up! Keep going, say done or next when ready.");
            }
            // Continue counting into negative - don't stop timer
        }, 1000);
    }

    // Update timer display
    function updateTimerDisplay() {
        const timerElement = document.getElementById('stepTimer');
        if (timerElement) {
            const absTime = Math.abs(timeRemaining);
            const minutes = Math.floor(absTime / 60);
            const seconds = absTime % 60;
            const sign = timeRemaining < 0 ? '-' : '';
            timerElement.textContent = `${sign}${minutes}:${seconds.toString().padStart(2, '0')}`;

            // Visual states
            if (timeRemaining <= 10 && timeRemaining > 0) {
                // Warning: time running out
                timerElement.classList.add('timer-warning');
                timerElement.classList.remove('timer-overtime');
            } else if (timeRemaining <= 0) {
                // Overtime: negative time
                timerElement.classList.remove('timer-warning');
                timerElement.classList.add('timer-overtime');
            } else {
                // Normal: plenty of time
                timerElement.classList.remove('timer-warning');
                timerElement.classList.remove('timer-overtime');
            }
        }
    }

    // Handle step completion (via voice or button)
    function handleStepComplete() {
        const task = tasks[currentDay][currentTaskIndex];

        if (currentStep < task.steps.length - 1) {
            nextStep();
        } else {
            completeTask();
        }
    }

    // Add default step durations to tasks that don't have them
    function ensureStepDurations() {
        Object.keys(tasks).forEach(day => {
            tasks[day].forEach(task => {
                if (!task.stepDurations) {
                    // Default: 30 seconds per step
                    task.stepDurations = task.steps.map(() => 30);
                }
            });
        });
    }

    // Convert day number to day name
    function getDayName(dayNumber) {
        const dayNames = {
            1: 'Monday',
            2: 'Tuesday',
            3: 'Wednesday',
            4: 'Thursday',
            5: 'Friday',
            6: 'Saturday',
            7: 'Sunday'
        };
        return dayNames[dayNumber] || `Day ${dayNumber}`;
    }

    // Get today's day number (1-7, Monday=1)
    function getTodayDayNumber() {
        const today = new Date().getDay(); // 0=Sunday, 1=Monday, etc.
        return today === 0 ? 7 : today; // Convert Sunday from 0 to 7
    }

    // Calculate average score for a day
    async function getDayAverageScore(dayNumber) {
        if (!auth.currentUser) return null;

        try {
            const { collection, query, where, getDocs } = await import('https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore.js');

            const taskHistoryRef = collection(db, 'users', auth.currentUser.uid, 'taskHistory');
            const q = query(taskHistoryRef, where('dayOfWeek', '==', dayNumber));
            const querySnapshot = await getDocs(q);

            if (querySnapshot.empty) return null;

            let totalScore = 0;
            let count = 0;

            querySnapshot.forEach((doc) => {
                const data = doc.data();
                totalScore += data.totalScore || 0;
                count++;
            });

            return totalScore / count;
        } catch (error) {
            console.error('Failed to get day average score:', error);
            return null;
        }
    }

    // Check if all required tasks for a day are completed today
    async function checkDayCompletion(dayNumber) {
        if (!auth.currentUser) return { allComplete: false, canAddBonus: false };

        try {
            const { collection, query, where, getDocs } = await import('https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore.js');

            const requiredTaskCount = tasks[dayNumber].length;
            const today = new Date().toDateString();

            const taskHistoryRef = collection(db, 'users', auth.currentUser.uid, 'taskHistory');
            const q = query(taskHistoryRef, where('dayOfWeek', '==', dayNumber));
            const querySnapshot = await getDocs(q);

            // Filter to only today's completions
            let todayCompletions = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                const completedDate = data.timestamp?.toDate().toDateString();
                if (completedDate === today) {
                    todayCompletions.push(data);
                }
            });

            const allComplete = todayCompletions.length >= requiredTaskCount;

            // Calculate average score for today's completions
            let avgScore = 0;
            if (todayCompletions.length > 0) {
                const totalScore = todayCompletions.reduce((sum, t) => sum + (t.totalScore || 0), 0);
                avgScore = totalScore / todayCompletions.length;
            }

            const canAddBonus = allComplete && avgScore >= 70;

            return { allComplete, canAddBonus, avgScore };
        } catch (error) {
            console.error('Failed to check day completion:', error);
            return { allComplete: false, canAddBonus: false };
        }
    }

    // Add a bonus task to a day
    function addBonusTask(dayNumber) {
        const taskName = prompt('Enter bonus task name:');
        if (!taskName) return;

        const newTask = {
            name: taskName,
            icon: '⭐',
            steps: ['Complete this bonus task!'],
            stepDurations: [60],
            color: '#FFD700',
            isBonus: true
        };

        tasks[dayNumber].push(newTask);
        showTasksView(dayNumber);
    }

    // Initialize on page load
    ensureStepDurations();
    initVoiceRecognition();

    function showDaysView() {
        currentView = 'days';
        currentDay = null;
        currentTaskIndex = null;
        currentStep = 0;
        renderHomeTab();
    }

    function showTasksView(day) {
        currentView = 'tasks';
        currentDay = day;
        currentTaskIndex = null;
        currentStep = 0;
        renderHomeTab();
    }

    function showTaskView(taskIndex) {
        currentView = 'task';
        currentTaskIndex = taskIndex;
        currentStep = 0;
        renderHomeTab();

        // Initialize performance tracking
        const task = tasks[currentDay][currentTaskIndex];
        currentTaskStartTime = Date.now();
        taskPerformanceData = {
            stepTimes: [],
            estimatedTimes: task.stepDurations || task.steps.map(() => 30),
            totalScore: 0,
            taskName: task.name,
            taskIcon: task.icon,
            dayOfWeek: currentDay
        };

        // Start voice recognition
        startVoiceRecognition();

        // Announce the task and first step
        speak(`Starting task: ${task.name}. ${task.steps[currentStep]}. Say done, next, complete, or ok to move to the next step.`);

        // Start timer for first step
        if (task.stepDurations && task.stepDurations[currentStep]) {
            startStepTimer(task.stepDurations[currentStep]);
        }
    }

    function nextStep() {
        // Record time taken for current step
        if (currentStepStartTime) {
            const stepDuration = (Date.now() - currentStepStartTime) / 1000; // in seconds
            taskPerformanceData.stepTimes.push(stepDuration);
            console.log(`⏱️  Step ${currentStep + 1} completed in ${stepDuration.toFixed(1)}s`);
        }

        const task = tasks[currentDay][currentTaskIndex];
        if (currentStep < task.steps.length - 1) {
            currentStep++;
            renderHomeTab();

            // Announce the new step
            speak(`Step ${currentStep + 1}. ${task.steps[currentStep]}. Say done, next, complete, or ok to continue.`);

            // Start timer for new step
            if (task.stepDurations && task.stepDurations[currentStep]) {
                startStepTimer(task.stepDurations[currentStep]);
            }
        }
    }

    function prevStep() {
        if (currentStep > 0) {
            currentStep--;
            renderHomeTab();

            // Announce the previous step
            const task = tasks[currentDay][currentTaskIndex];
            speak(`Going back. Step ${currentStep + 1}. ${task.steps[currentStep]}.`);

            // Start timer for this step
            if (task.stepDurations && task.stepDurations[currentStep]) {
                startStepTimer(task.stepDurations[currentStep]);
            }
        }
    }

    async function completeTask() {
        // Record final step time
        if (currentStepStartTime) {
            const stepDuration = (Date.now() - currentStepStartTime) / 1000;
            taskPerformanceData.stepTimes.push(stepDuration);
            console.log(`⏱️  Final step completed in ${stepDuration.toFixed(1)}s`);
        }

        // Calculate score based on performance
        let totalScore = 100; // Start with perfect score
        let totalActual = 0;
        let totalEstimated = 0;

        taskPerformanceData.stepTimes.forEach((actualTime, index) => {
            const estimatedTime = taskPerformanceData.estimatedTimes[index] || 30;
            totalActual += actualTime;
            totalEstimated += estimatedTime;

            // Deduct points for overtime
            if (actualTime > estimatedTime) {
                const overtime = actualTime - estimatedTime;
                const penalty = Math.min(overtime * 0.5, 15); // Max 15 points penalty per step
                totalScore -= penalty;
            }
        });

        totalScore = Math.max(0, Math.round(totalScore)); // Don't go below 0

        taskPerformanceData.totalScore = totalScore;
        taskPerformanceData.totalTime = totalActual;
        taskPerformanceData.estimatedTotal = totalEstimated;
        taskPerformanceData.completedAt = new Date().toISOString();

        console.log('📊 Task Performance:', taskPerformanceData);

        // Save to Firestore
        if (auth.currentUser) {
            try {
                const taskCompletionRef = doc(db, 'users', auth.currentUser.uid, 'taskHistory',
                    `${Date.now()}_${currentDay}_${currentTaskIndex}`);

                await setDoc(taskCompletionRef, {
                    ...taskPerformanceData,
                    userId: auth.currentUser.uid,
                    userEmail: auth.currentUser.email,
                    timestamp: new Date()
                });

                console.log('✅ Task completion saved to Firestore');
            } catch (error) {
                console.error('❌ Failed to save task completion:', error);
            }
        }

        // Stop voice recognition
        stopVoiceRecognition();

        // Clear timer
        if (stepTimer) {
            clearInterval(stepTimer);
            stepTimer = null;
        }

        speak(`Great job! Task completed! Your score is ${totalScore} out of 100.`);
        alert(`Great job! Task completed! 🎉\n\nScore: ${totalScore}/100\nTime: ${totalActual.toFixed(1)}s / ${totalEstimated}s`);
        showTasksView(currentDay);
    }

    function renderHomeTab() {
        console.log('🏠 renderHomeTab called, currentView:', currentView);

        const homeTabContent = document.getElementById('homeTabContent');
        console.log('📍 homeTabContent element:', homeTabContent);

        if (!homeTabContent) {
            console.error('❌ homeTabContent element not found!');
            console.log('Available elements with ids:', Array.from(document.querySelectorAll('[id]')).map(el => el.id));
            return;
        }

        console.log('📝 Rendering home tab content for view:', currentView);

        let html = '<div class="p-4" style="padding-bottom: 100px;">';

        if (currentView === 'days') {
            // Show day selector with today's card large
            const todayDayNumber = getTodayDayNumber();

            html += `
                <h2 class="text-3xl font-bold mb-2 text-white text-center" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.2);">🏠 My Daily Tasks</h2>
                <p class="text-white text-center mb-4 opacity-90">Today is ${getDayName(todayDayNumber)}</p>
            `;

            // Today's large card with task preview
            const todayTasks = tasks[todayDayNumber];
            html += `
                <div style="margin-bottom: 30px;">
                    <button class="today-card" onclick="showTasksView(${todayDayNumber})" style="
                        width: 100%;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        border: none;
                        border-radius: 20px;
                        padding: 30px;
                        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
                        cursor: pointer;
                        transition: transform 0.3s ease, box-shadow 0.3s ease;
                    " onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 12px 30px rgba(102, 126, 234, 0.6)'"
                       onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(102, 126, 234, 0.4)'">
                        <div style="font-size: 60px; margin-bottom: 15px;">📅</div>
                        <div style="font-size: 28px; font-weight: bold; color: white; margin-bottom: 10px;">
                            ${getDayName(todayDayNumber)}
                        </div>
                        <div style="font-size: 16px; color: rgba(255,255,255,0.9); margin-bottom: 20px;">
                            ${todayTasks.length} tasks to complete
                        </div>
                        <div style="text-align: left; background: rgba(255,255,255,0.2); border-radius: 12px; padding: 15px;">
                            <div style="color: white; font-weight: 600; margin-bottom: 10px; font-size: 14px;">Today's Tasks:</div>
            `;

            todayTasks.forEach((task, index) => {
                html += `
                    <div style="color: white; font-size: 13px; padding: 6px 0; display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 18px;">${task.icon}</span>
                        <span>${task.name}</span>
                        <span style="opacity: 0.7; font-size: 11px;">(${task.steps.length} steps)</span>
                    </div>
                `;
            });

            html += `
                        </div>
                        <div style="margin-top: 20px; padding: 12px; background: rgba(255,255,255,0.3); border-radius: 8px; color: white; font-size: 14px;">
                            👆 Tap to start your day!
                        </div>
                    </button>
                </div>
            `;

            // Other days in smaller cards at bottom
            html += `
                <div style="border-top: 2px solid rgba(255,255,255,0.3); padding-top: 20px; margin-top: 20px;">
                    <h3 style="color: white; font-size: 16px; margin-bottom: 15px; opacity: 0.8;">Other Days</h3>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px;">
            `;

            for (let day = 1; day <= 7; day++) {
                if (day !== todayDayNumber) {
                    const isDisabled = day !== todayDayNumber;
                    html += `
                        <button class="small-day-card" onclick="showTasksView(${day})"
                                style="
                                    background: ${isDisabled ? 'rgba(150, 150, 150, 0.3)' : 'rgba(255, 255, 255, 0.2)'};
                                    border: none;
                                    border-radius: 12px;
                                    padding: 15px 10px;
                                    cursor: ${isDisabled ? 'not-allowed' : 'pointer'};
                                    transition: all 0.3s ease;
                                    opacity: ${isDisabled ? '0.6' : '1'};
                                "
                                ${isDisabled ? 'disabled' : ''}
                                onmouseover="if(!this.disabled) { this.style.background='rgba(255, 255, 255, 0.3)'; this.style.transform='scale(1.05)'; }"
                                onmouseout="if(!this.disabled) { this.style.background='rgba(255, 255, 255, 0.2)'; this.style.transform='scale(1)'; }">
                            <div style="font-size: 24px; margin-bottom: 5px;">📅</div>
                            <div style="font-size: 12px; font-weight: 600; color: white; margin-bottom: 3px;">
                                ${getDayName(day)}
                            </div>
                            <div style="font-size: 10px; color: rgba(255,255,255,0.8);">
                                ${tasks[day].length} tasks
                            </div>
                            ${isDisabled ? '<div style="font-size: 9px; color: rgba(255,255,255,0.6); margin-top: 5px;">🔒 View Only</div>' : ''}
                        </button>
                    `;
                }
            }

            html += `
                    </div>
                </div>
            `;

        } else if (currentView === 'tasks') {
            // Show task list for selected day
            const dayTasks = tasks[currentDay];
            const todayDayNumber = getTodayDayNumber();
            const isToday = currentDay === todayDayNumber;

            html += `
                <button class="stepahead-back-button" onclick="showDaysView()">← Back to Days</button>
                <h2 class="text-3xl font-bold mb-2 text-white text-center" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.2);">📅 ${getDayName(currentDay)}</h2>
                <p class="text-white text-center mb-6 opacity-90">You have ${dayTasks.length} task${dayTasks.length > 1 ? 's' : ''} ${isToday ? 'today' : 'this day'}</p>
                ${!isToday ? '<div class="text-center mb-4 p-3 bg-yellow-100 rounded-lg"><p class="text-yellow-800">🔒 View Only - Tasks can only be completed on their scheduled day</p></div>' : ''}
                <div class="task-grid" id="taskGrid">
            `;

            dayTasks.forEach((task, index) => {
                const isDisabled = !isToday;
                const bonusBadge = task.isBonus ? '<span style="background: gold; color: #333; padding: 2px 8px; border-radius: 12px; font-size: 10px; font-weight: bold; margin-left: 5px;">⭐ BONUS</span>' : '';

                html += `
                    <button class="task-button"
                            onclick="${isDisabled ? 'return false' : `showTaskView(${index})`}"
                            style="${isDisabled ? 'opacity: 0.5; cursor: not-allowed;' : 'cursor: pointer;'}"
                            ${isDisabled ? 'disabled' : ''}>
                        <div class="task-icon">${task.icon}</div>
                        <div class="task-info">
                            <div class="task-title">Task ${index + 1}: ${task.name}${bonusBadge}</div>
                            <div class="task-steps">${task.steps.length} step${task.steps.length > 1 ? 's' : ''}</div>
                        </div>
                        ${isDisabled ? '<div style="position: absolute; top: 10px; right: 10px; font-size: 20px;">🔒</div>' : ''}
                    </button>
                `;
            });

            html += '</div>';

            // Add bonus task button if applicable (only for today)
            if (isToday) {
                html += '<div id="bonusTaskSection" style="margin-top: 20px;"></div>';
                html += `
                    <scr` + `ipt>
                        (async function() {
                            const completion = await checkDayCompletion(${currentDay});
                            const bonusSection = document.getElementById('bonusTaskSection');

                            if (bonusSection) {
                                if (completion.allComplete && !completion.canAddBonus && completion.avgScore < 70) {
                                    bonusSection.innerHTML = \`
                                        <div class="bg-yellow-100 rounded-lg p-4 text-center">
                                            <p class="text-yellow-800 font-semibold mb-2">📊 Current Average Score: \${Math.round(completion.avgScore)}/100</p>
                                            <p class="text-yellow-700">Complete tasks again with 70%+ average to unlock bonus tasks!</p>
                                        </div>
                                    \`;
                                } else if (completion.canAddBonus) {
                                    bonusSection.innerHTML = \`
                                        <button onclick="addBonusTask(${currentDay})" style="
                                            width: 100%;
                                            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                                            color: white;
                                            border: none;
                                            padding: 20px;
                                            border-radius: 15px;
                                            font-size: 18px;
                                            font-weight: bold;
                                            cursor: pointer;
                                            box-shadow: 0 4px 15px rgba(245, 87, 108, 0.4);
                                            transition: all 0.3s ease;
                                        " onmouseover="this.style.transform='scale(1.05)'"
                                           onmouseout="this.style.transform='scale(1)'">
                                            ⭐ Add Bonus Task ⭐
                                            <div style="font-size: 12px; margin-top: 5px; opacity: 0.9;">
                                                Earn extra points! (Average Score: \${Math.round(completion.avgScore)}/100)
                                            </div>
                                        </button>
                                    \`;
                                }
                            }
                        })();
                    <\/script>
                `;
            }

        } else if (currentView === 'task') {
            // Show individual task with steps
            const task = tasks[currentDay][currentTaskIndex];
            const stepDuration = task.stepDurations ? task.stepDurations[currentStep] : 30;
            const minutes = Math.floor(stepDuration / 60);
            const seconds = stepDuration % 60;
            const estimatedTime = `${minutes}:${seconds.toString().padStart(2, '0')}`;

            html += `
                <button class="stepahead-back-button" onclick="showTasksView(${currentDay})">← Back to ${getDayName(currentDay)}</button>
                <div class="task-view">
                    <div class="task-card" style="background-color: ${task.color};">
                        <div class="task-emoji">${task.icon}</div>
                        <h1 class="task-name">${task.name}</h1>

                        <!-- Timer Display -->
                        <div style="text-align: center; margin: 15px 0;">
                            <div style="font-size: 48px; font-weight: bold; color: #2c3e50; font-family: 'Courier New', monospace;" id="stepTimer">
                                ${estimatedTime}
                            </div>
                            <div style="font-size: 14px; color: #7f8c8d; margin-top: 5px;">
                                ⏱️ Estimated time for this step
                            </div>
                        </div>

                        <div class="step-counter">Step ${currentStep + 1} of ${task.steps.length}</div>
                        <div class="step-box">
                            <p class="step-text">${task.steps[currentStep]}</p>
                        </div>

                        <!-- Done Button (Voice Alternative) -->
                        <div style="text-align: center; margin: 20px 0;">
                            <button onclick="handleStepComplete()" style="
                                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                color: white;
                                border: none;
                                padding: 15px 40px;
                                border-radius: 25px;
                                font-size: 18px;
                                font-weight: bold;
                                cursor: pointer;
                                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
                                transition: all 0.3s ease;
                            " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                ✓ Done
                            </button>
                            <div style="font-size: 12px; color: #7f8c8d; margin-top: 10px;">
                                🎤 Or say "done", "next", "complete", or "ok"
                            </div>
                        </div>

                        <div class="progress-dots">
            `;
            for (let i = 0; i < task.steps.length; i++) {
                const completed = i <= currentStep ? 'completed' : '';
                const content = i <= currentStep ? '✓' : (i + 1);
                html += `<div class="progress-dot ${completed}">${content}</div>`;
            }
            html += `
                        </div>
                        <div class="button-group">
            `;
            if (currentStep > 0) {
                html += '<button class="nav-button prev" onclick="prevStep()">← Previous</button>';
            }
            if (currentStep < task.steps.length - 1) {
                html += '<button class="nav-button next" onclick="nextStep()">Next →</button>';
            } else {
                html += '<button class="nav-button complete" onclick="completeTask()">✓ Task Complete! 🎉</button>';
            }
            html += `
                        </div>
                    </div>
                </div>
            `;
        }

        html += '</div>';
        homeTabContent.innerHTML = html;
        console.log('✅ Home tab rendered successfully, HTML length:', html.length);
        console.log('📊 Content preview:', html.substring(0, 200) + '...');
    }

    // Expose renderHomeTab to window so module script can access it
    window.renderHomeTab = renderHomeTab;
    console.log('✅ renderHomeTab exposed to window');

    // Auto-render home tab when app becomes visible
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            const mainAppContainer = document.getElementById('mainAppContainer');
            if (mainAppContainer && !mainAppContainer.classList.contains('hidden')) {
                console.log('👁️ Main app container became visible, rendering home tab');
                renderHomeTab();
                observer.disconnect(); // Stop observing once rendered
            }
        });
    });

    // Start observing when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            const mainAppContainer = document.getElementById('mainAppContainer');
            if (mainAppContainer) {
                observer.observe(mainAppContainer, { attributes: true, attributeFilter: ['class'] });
                console.log('👀 Started observing mainAppContainer for visibility changes');
            }
        });
    } else {
        const mainAppContainer = document.getElementById('mainAppContainer');
        if (mainAppContainer) {
            observer.observe(mainAppContainer, { attributes: true, attributeFilter: ['class'] });
            console.log('👀 Started observing mainAppContainer for visibility changes');
        }
    }

        // Tab switching
        function switchTab(tabId, element) {
            console.log('🔄 Switching to tab:', tabId);

            // Remove active class from all nav items
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));

            // Add active class to clicked item
            if (element) {
                element.classList.add('active');
            }

            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

            // Show selected tab content
            const targetTab = document.getElementById(tabId + 'Tab');
            if (targetTab) {
                targetTab.classList.add('active');
                console.log('✅ Tab switched successfully');

                // Load history when history tab is selected
                if (tabId === 'history') {
                    renderHistoryTab();
                }
            } else {
                console.error('❌ Tab not found:', tabId + 'Tab');
                console.log('Available tabs:', Array.from(document.querySelectorAll('[id$="Tab"]')).map(el => el.id));
            }
        }

        // Render task history tab
        async function renderHistoryTab() {
            const historyTabContent = document.getElementById('historyTabContent');
            if (!historyTabContent || !auth.currentUser) {
                return;
            }

            historyTabContent.innerHTML = `
                <h2 class="text-2xl font-bold mb-4">📊 Task History</h2>
                <div class="bg-white rounded-lg shadow p-6">
                    <p class="text-gray-700">Loading...</p>
                </div>
            `;

            try {
                // Fetch user's task history from Firestore
                const { collection, query, orderBy, getDocs } = await import('https://www.gstatic.com/firebasejs/10.14.0/firebase-firestore.js');

                const taskHistoryRef = collection(db, 'users', auth.currentUser.uid, 'taskHistory');
                const q = query(taskHistoryRef, orderBy('timestamp', 'desc'));
                const querySnapshot = await getDocs(q);

                // Group tasks by name
                const taskGroups = {};
                querySnapshot.forEach((doc) => {
                    const data = doc.data();
                    const taskKey = `${data.taskName}`;

                    if (!taskGroups[taskKey]) {
                        taskGroups[taskKey] = {
                            taskName: data.taskName,
                            taskIcon: data.taskIcon || '✓',
                            attempts: [],
                            count: 0
                        };
                    }

                    taskGroups[taskKey].attempts.push({
                        id: doc.id,
                        ...data,
                        timestamp: data.timestamp?.toDate() || new Date()
                    });
                    taskGroups[taskKey].count++;
                });

                // Render grouped tasks
                let html = '<h2 class="text-2xl font-bold mb-4">📊 Task History</h2>';

                if (Object.keys(taskGroups).length === 0) {
                    html += `
                        <div class="bg-white rounded-lg shadow p-6">
                            <p class="text-gray-700">No tasks completed yet. Complete some tasks to see your history!</p>
                        </div>
                    `;
                } else {
                    html += '<div class="space-y-4">';

                    Object.values(taskGroups).forEach((group) => {
                        const avgScore = group.attempts.reduce((sum, a) => sum + (a.totalScore || 0), 0) / group.count;
                        const taskId = group.taskName.replace(/\s+/g, '_');

                        html += `
                            <div class="bg-white rounded-lg shadow p-4 cursor-pointer hover:shadow-lg transition-shadow"
                                 onclick="showTaskDetails('${taskId}')">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-3">
                                        <div class="text-3xl">${group.taskIcon}</div>
                                        <div>
                                            <h3 class="font-bold text-lg">${group.taskName}</h3>
                                            <p class="text-sm text-gray-600">
                                                Completed ${group.count} time${group.count > 1 ? 's' : ''}
                                            </p>
                                        </div>
                                    </div>
                                    <div class="text-right">
                                        <div class="text-2xl font-bold text-blue-600">${Math.round(avgScore)}</div>
                                        <div class="text-xs text-gray-500">Avg Score</div>
                                    </div>
                                </div>
                            </div>
                        `;

                        // Store task data for detail view
                        window[`taskData_${taskId}`] = group;
                    });

                    html += '</div>';
                }

                historyTabContent.innerHTML = html;

            } catch (error) {
                console.error('❌ Failed to load task history:', error);
                historyTabContent.innerHTML = `
                    <h2 class="text-2xl font-bold mb-4">📊 Task History</h2>
                    <div class="bg-white rounded-lg shadow p-6">
                        <p class="text-red-600">Failed to load history: ${error.message}</p>
                    </div>
                `;
            }
        }

        // Show task details with graph
        function showTaskDetails(taskId) {
            const taskData = window[`taskData_${taskId}`];
            if (!taskData) return;

            const historyTabContent = document.getElementById('historyTabContent');

            // Render detail view with graph
            let html = `
                <button class="stepahead-back-button mb-4" onclick="renderHistoryTab()">← Back to History</button>
                <h2 class="text-2xl font-bold mb-4">${taskData.taskIcon} ${taskData.taskName}</h2>
                <p class="text-gray-600 mb-4">Completed ${taskData.count} time${taskData.count > 1 ? 's' : ''}</p>
            `;

            // Simple canvas for graph
            html += `
                <div class="bg-white rounded-lg shadow p-6 mb-4">
                    <h3 class="font-bold mb-4">Step Times Comparison</h3>
                    <canvas id="taskChart" width="400" height="200"></canvas>
                </div>
            `;

            // Attempts list
            html += '<div class="space-y-2">';
            taskData.attempts.forEach((attempt, index) => {
                const date = attempt.timestamp.toLocaleString();
                html += `
                    <div class="bg-gray-50 rounded p-3">
                        <div class="flex justify-between items-center">
                            <div>
                                <span class="font-semibold">Attempt ${index + 1}</span>
                                <span class="text-sm text-gray-500 ml-2">${date}</span>
                            </div>
                            <div class="text-lg font-bold ${attempt.totalScore >= 80 ? 'text-green-600' : attempt.totalScore >= 60 ? 'text-yellow-600' : 'text-red-600'}">
                                ${attempt.totalScore}/100
                            </div>
                        </div>
                        <div class="text-sm text-gray-600 mt-1">
                            Time: ${attempt.totalTime?.toFixed(1)}s / ${attempt.estimatedTotal}s
                        </div>
                    </div>
                `;
            });
            html += '</div>';

            historyTabContent.innerHTML = html;

            // Draw graph
            setTimeout(() => drawTaskGraph(taskData), 100);
        }

        // Draw multi-line graph
        function drawTaskGraph(taskData) {
            const canvas = document.getElementById('taskChart');
            if (!canvas) return;

            const ctx = canvas.getContext('2d');
            const width = canvas.width;
            const height = canvas.height;
            const padding = 40;

            // Clear canvas
            ctx.clearRect(0, 0, width, height);

            // Find max step count and max time
            let maxSteps = 0;
            let maxTime = 0;
            taskData.attempts.forEach(attempt => {
                if (attempt.stepTimes) {
                    maxSteps = Math.max(maxSteps, attempt.stepTimes.length);
                    attempt.stepTimes.forEach(time => {
                        maxTime = Math.max(maxTime, time);
                    });
                }
            });

            if (maxSteps === 0) return;

            // Draw axes
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(padding, padding);
            ctx.lineTo(padding, height - padding);
            ctx.lineTo(width - padding, height - padding);
            ctx.stroke();

            // Labels
            ctx.fillStyle = '#333';
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            for (let i = 0; i < maxSteps; i++) {
                const x = padding + (i + 1) * ((width - 2 * padding) / (maxSteps + 1));
                ctx.fillText(`S${i + 1}`, x, height - padding + 20);
            }

            ctx.save();
            ctx.translate(15, height / 2);
            ctx.rotate(-Math.PI / 2);
            ctx.fillText('Time (seconds)', 0, 0);
            ctx.restore();

            // Draw lines for each attempt
            const colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', '#1abc9c'];

            taskData.attempts.slice(0, 6).forEach((attempt, attemptIndex) => {
                if (!attempt.stepTimes) return;

                ctx.strokeStyle = colors[attemptIndex % colors.length];
                ctx.fillStyle = colors[attemptIndex % colors.length];
                ctx.lineWidth = 2;
                ctx.beginPath();

                attempt.stepTimes.forEach((time, stepIndex) => {
                    const x = padding + (stepIndex + 1) * ((width - 2 * padding) / (maxSteps + 1));
                    const y = height - padding - (time / maxTime) * (height - 2 * padding);

                    if (stepIndex === 0) {
                        ctx.moveTo(x, y);
                    } else {
                        ctx.lineTo(x, y);
                    }

                    // Draw point
                    ctx.fillRect(x - 3, y - 3, 6, 6);
                });

                ctx.stroke();
            });

            // Legend
            ctx.font = '10px Arial';
            ctx.textAlign = 'left';
            taskData.attempts.slice(0, 6).forEach((attempt, index) => {
                const y = padding + index * 15;
                ctx.fillStyle = colors[index % colors.length];
                ctx.fillRect(width - padding - 60, y, 10, 10);
                ctx.fillStyle = '#333';
                ctx.fillText(`Attempt ${index + 1}`, width - padding - 45, y + 8);
            });
        }

        // Debug Controls - Navbar Position Adjustment
        let navbarBottomOffset = 0;

        function toggleDebugControls() {
            const controls = document.getElementById('debugControls');
            controls.classList.toggle('hidden');
        }

        function moveNavbar(direction) {
            const navbar = document.querySelector('.mobile-bottom-nav');
            const step = 2; // Move 2px at a time

            if (direction === 'up') {
                navbarBottomOffset += step;
            } else if (direction === 'down') {
                navbarBottomOffset -= step;
            }

            // Preserve all existing styles
            navbar.style.bottom = navbarBottomOffset + 'px';
            navbar.style.position = 'fixed';
            navbar.style.left = '24px';
            navbar.style.right = '24px';
            navbar.style.borderRadius = '20px';
            navbar.style.padding = '0.5rem 0.25rem';

            updateDebugInfo();
        }

        function resetNavbar() {
            const navbar = document.querySelector('.mobile-bottom-nav');
            navbarBottomOffset = 0;
            navbar.style.bottom = '';
            navbar.style.position = '';
            navbar.style.left = '';
            navbar.style.right = '';
            navbar.style.borderRadius = '';
            navbar.style.padding = '';
            updateDebugInfo();
        }

        function updateDebugInfo() {
            const navbar = document.querySelector('.mobile-bottom-nav');
            const rect = navbar.getBoundingClientRect();
            const computedStyle = window.getComputedStyle(navbar);

            document.getElementById('debugInfo').innerHTML = `
                Bottom: ${navbarBottomOffset}px<br>
                Visible: ${computedStyle.display}<br>
                Y: ${Math.round(rect.top)}px
            `;
        }

        // Show signup form
        function showSignup() {
            document.getElementById('loginForm').classList.add('hidden');
            document.getElementById('signupForm').classList.remove('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
        }

        // Show login form
        function showLogin() {
            document.getElementById('signupForm').classList.add('hidden');
            document.getElementById('loginForm').classList.remove('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
        }

        // Show error message
        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.classList.remove('hidden');
        }

        // Sign in
        async function signIn() {
            console.log('🔑 Sign in button clicked');

            // Clear any error messages first
            document.getElementById('errorMessage').classList.add('hidden');

            // Developer/Test Mode - Bypass Firebase for local development
            // Just click Sign In to enter the app without credentials
            console.log("🔓 Dev mode - bypassing authentication");
            bypassFirebaseLogin();
            return;

            // Production Firebase authentication (currently disabled for dev)
            // Uncomment below for production:
            /*
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            console.log('📧 Email:', email);
            console.log('🔒 Password length:', password?.length || 0);

            if (!email || !password) {
                console.log('❌ Missing email or password');
                showError('Please enter email and password');
                return;
            }

            console.log('🔥 Attempting Firebase sign in...');
            console.log('Auth object:', window.auth ? '✅ Available' : '❌ Missing');
            console.log('signInWithEmailAndPassword:', window.signInWithEmailAndPassword ? '✅ Available' : '❌ Missing');

            try {
                console.log('🚀 Calling signInWithEmailAndPassword...');

                // Add timeout to prevent hanging forever (30 seconds for iOS)
                const signInPromise = window.signInWithEmailAndPassword(window.auth, email, password);
                const timeoutPromise = new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('Sign in timeout after 30 seconds. Check internet connection.')), 30000)
                );

                const result = await Promise.race([signInPromise, timeoutPromise]);
                console.log('✅ Signed in successfully, user:', result.user.email);
            } catch (error) {
                console.error('❌ Sign in error:', error);
                console.error('Error code:', error.code);
                console.error('Error message:', error.message);
                console.error('Error name:', error.name);
                console.error('Error stack:', error.stack);

                // Show user-friendly error
                let errorMessage = error.message || 'Sign in failed';

                if (error.code === 'auth/network-request-failed') {
                    errorMessage = 'Network error. Please check your internet connection.';
                } else if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Incorrect password. Please try again.';
                } else if (error.code === 'auth/user-not-found') {
                    errorMessage = 'User not found. Please check your email.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Invalid email address.';
                } else if (error.message && error.message.includes('timeout')) {
                    errorMessage = 'Sign in timed out. This may be a network issue. Try:\n1. Check internet connection\n2. Try again in a few seconds\n3. Restart the app';
                }

                showError(errorMessage);
            }
            */
        }

        // Bypass Firebase login for development/testing
        function bypassFirebaseLogin() {
            // Hide login, show app
            document.getElementById('loginScreen').classList.add('hidden');
            document.getElementById('mainAppContainer').classList.remove('hidden');
            document.body.classList.add('app-active');

            // Set mock user data
            const mockName = "Developer";
            const mockEmail = "dev@test.local";
            document.getElementById('userName').textContent = mockName;
            document.getElementById('profileName').value = mockName;
            document.getElementById('profileEmail').value = mockEmail;

            // Initialize StepAhead content
            renderHomeTab();

            console.log("✅ Bypassed Firebase - Developer mode active");
        }

        // Sign up
        async function signUp() {
            // Clear any previous error messages
            document.getElementById('errorMessage').classList.add('hidden');

            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;

            if (!name || !email || !password) {
                showError('Please fill in all fields');
                return;
            }

            if (password.length < 6) {
                showError('Password must be at least 6 characters');
                return;
            }

            try {
                // Create user account
                const userCredential = await window.createUserWithEmailAndPassword(window.auth, email, password);
                console.log('✅ User created in Firebase Auth:', userCredential.user.uid);

                // Update profile with display name
                await window.updateProfile(userCredential.user, {
                    displayName: name
                });
                console.log('✅ Profile updated with display name');

                // Save user data to Firestore
                try {
                    await window.setDoc(window.doc(window.db, 'users', userCredential.user.uid), {
                        displayName: name,
                        email: email,
                        createdAt: new Date().toISOString()
                    });
                    console.log('✅ User data saved to Firestore');
                } catch (firestoreError) {
                    console.error('❌ Firestore write failed:', firestoreError);
                    // User is created but Firestore failed - show warning
                    showError('Account created but profile save failed. Check Firestore security rules.');
                    // Don't throw - user can still use the app
                    return;
                }

                // Success - clear form
                document.getElementById('signupName').value = '';
                document.getElementById('signupEmail').value = '';
                document.getElementById('signupPassword').value = '';

                console.log('✅ Signup complete!');
            } catch (error) {
                console.error('❌ Signup error:', error);
                showError(error.message);
            }
        }

        // Save profile
        async function saveProfile() {
            const name = document.getElementById('profileName').value;

            if (!name) {
                alert('Please enter a name');
                return;
            }

            try {
                const user = window.auth.currentUser;
                await window.updateProfile(user, { displayName: name });
                await window.setDoc(window.doc(window.db, 'users', user.uid), {
                    displayName: name,
                    email: user.email,
                    updatedAt: new Date().toISOString()
                }, { merge: true });

                document.getElementById('userName').textContent = name;
                alert('Profile updated successfully!');
            } catch (error) {
                alert('Error updating profile: ' + error.message);
            }
        }

        // Logout
        async function logout() {
            if (confirm('Are you sure you want to logout?')) {
                try {
                    await window.signOut(window.auth);

                    // Explicitly navigate back to login screen
                    document.getElementById('loginScreen').classList.remove('hidden');
                    document.getElementById('mainAppContainer').classList.add('hidden');
                    document.body.classList.remove('app-active');

                    // Clear any form data
                    document.getElementById('profileName').value = '';
                    document.getElementById('profileEmail').value = '';
                    document.getElementById('userName').textContent = '';

                    // Reset theme to default and clear localStorage
                    localStorage.removeItem('appTheme');
                    changeTheme('theme-default');
                    console.log('🎨 Theme reset to default on logout');
                } catch (error) {
                    alert('Error signing out: ' + error.message);
                }
            }
        }

        // Theme Management
        async function changeTheme(themeName) {
            // Remove all theme classes
            document.body.className = document.body.className
                .split(' ')
                .filter(c => !c.startsWith('theme-'))
                .join(' ');

            // Add new theme
            document.body.classList.add(themeName);

            // Update checkmarks and styling
            document.querySelectorAll('[id$="-btn"]').forEach(btn => {
                const checkmark = btn.querySelector('.checkmark');
                if (checkmark) checkmark.remove();
                // Remove theme-selected class
                btn.classList.remove('theme-selected');
                // Reset border
                const circle = btn.querySelector('div');
                if (circle) circle.style.border = '3px solid #e5e7eb';
            });

            const selectedBtn = document.getElementById(themeName + '-btn');
            if (selectedBtn) {
                // Add checkmark
                const checkmark = document.createElement('div');
                checkmark.className = 'checkmark absolute inset-0 flex items-center justify-center';
                checkmark.innerHTML = '<span class="text-lg text-white" style="text-shadow: 0 1px 2px rgba(0,0,0,0.5);">✓</span>';
                selectedBtn.appendChild(checkmark);

                // Add theme-selected class
                selectedBtn.classList.add('theme-selected');
            }

            // Save theme to Firestore per user (not localStorage)
            if (auth.currentUser) {
                try {
                    await setDoc(doc(db, 'users', auth.currentUser.uid), {
                        theme: themeName
                    }, { merge: true });
                    console.log('🎨 Theme saved to Firestore:', themeName);
                } catch (error) {
                    console.warn('⚠️  Could not save theme to Firestore:', error.message);
                    // Fallback to localStorage if Firestore fails
                    localStorage.setItem('appTheme', themeName);
                }
            } else {
                // Not logged in, use localStorage as fallback
                localStorage.setItem('appTheme', themeName);
            }

            console.log('🎨 Theme changed to:', themeName);
        }

        // Notifications Toggle
        function toggleNotifications(enabled) {
            console.log('Notifications:', enabled ? 'enabled' : 'disabled');
            localStorage.setItem('notificationsEnabled', enabled);
            // Add actual notification logic here
        }

        // Dark Mode Toggle
        function toggleDarkMode(enabled) {
            if (enabled) {
                document.body.classList.add('dark-mode');
            } else {
                document.body.classList.remove('dark-mode');
            }
            localStorage.setItem('darkMode', enabled);
            console.log('Dark mode:', enabled ? 'enabled' : 'disabled');
        }

        // Initialize settings on load
        function initializeSettings() {
            // Load saved theme
            const savedTheme = localStorage.getItem('appTheme') || 'theme-default';
            changeTheme(savedTheme);

            // Load notifications setting
            const notifEnabled = localStorage.getItem('notificationsEnabled') === 'true';
            const notifToggle = document.getElementById('notificationsToggle');
            if (notifToggle) notifToggle.checked = notifEnabled;

            // Load dark mode setting
            const darkModeEnabled = localStorage.getItem('darkMode') === 'true';
            const darkToggle = document.getElementById('darkModeToggle');
            if (darkToggle) darkToggle.checked = darkModeEnabled;
            if (darkModeEnabled) document.body.classList.add('dark-mode');

            // Update profile display
            const profileDisplayName = document.getElementById('profileDisplayName');
            const profileDisplayEmail = document.getElementById('profileDisplayEmail');
            const profileName = document.getElementById('profileName');
            const profileEmail = document.getElementById('profileEmail');

            if (profileDisplayName && profileName) {
                profileDisplayName.textContent = profileName.value || 'Developer';
            }
            if (profileDisplayEmail && profileEmail) {
                profileDisplayEmail.textContent = profileEmail.value || 'dev@test.local';
            }
        }

        // Handle enter key on login and initialize settings
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('loginEmail')?.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') signIn();
            });
            document.getElementById('loginPassword')?.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') signIn();
            });
            document.getElementById('signupPassword')?.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') signUp();
            });

            // Initialize settings
            initializeSettings();
        });

    </script>

    <!-- iOS Login Screen Fix - Run after DOM is fully loaded -->
    <script>
        console.log('🎯 Final iOS fix script running...');
        console.log('🎯 Document ready state:', document.readyState);

        // Simple, direct fix
        const loginScreen = document.getElementById('loginScreen');
        const mainApp = document.getElementById('mainAppContainer');

        if (loginScreen) {
            console.log('🎯 Found login screen');

            // Log current state
            const computed = window.getComputedStyle(loginScreen);
            console.log('🎯 Login screen display:', computed.display);
            console.log('🎯 Login screen visibility:', computed.visibility);
            console.log('🎯 Login screen opacity:', computed.opacity);
            console.log('🎯 Login screen zIndex:', computed.zIndex);
            console.log('🎯 Login screen has hidden class:', loginScreen.classList.contains('hidden'));

            // Force it visible
            loginScreen.classList.remove('hidden');
            loginScreen.style.display = 'flex';
            loginScreen.style.visibility = 'visible';
            loginScreen.style.opacity = '1';
            loginScreen.style.zIndex = '10000';
            loginScreen.style.position = 'relative';
            console.log('🎯 Applied visibility fixes to login screen');
        } else {
            console.log('🎯 ERROR: Login screen not found!');
        }

        if (mainApp) {
            console.log('🎯 Forcing main app hidden');
            mainApp.classList.add('hidden');
            mainApp.style.display = 'none';
            mainApp.style.visibility = 'hidden';
            mainApp.style.pointerEvents = 'none';
        }

        // Test: Set body to bright red to see if ANYTHING renders
        document.body.style.backgroundColor = 'red';
        console.log('🎯 Set body background to RED for testing');

        // Log body dimensions
        console.log('🎯 Body width:', document.body.offsetWidth);
        console.log('🎯 Body height:', document.body.offsetHeight);
        console.log('🎯 Window width:', window.innerWidth);
        console.log('🎯 Window height:', window.innerHeight);
    </script>

</body>
</html>
