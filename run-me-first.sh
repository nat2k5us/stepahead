#!/bin/bash

# Interactive FZF-based deployment menu with preview
# Modern alternative to what-do-you-want-2-do.sh

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEPLOYMENT_DIR="$SCRIPT_DIR/deployment"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Check if fzf is installed
if ! command -v fzf &> /dev/null; then
    echo -e "${RED}‚ùå Error: fzf is not installed${NC}"
    echo ""
    echo "fzf is required for this interactive menu."
    echo ""
    echo "Install it with:"
    echo "  macOS:   brew install fzf"
    echo "  Linux:   apt install fzf  or  yum install fzf"
    echo ""
    echo -e "${CYAN}Alternatively, use the classic menu:${NC}"
    echo "  ./what-do-you-want-2-do.sh"
    echo ""
    exit 1
fi

# Function to show header (removed - fzf handles display)
show_header() {
    clear
}

# Function to get preview text for each option
get_preview() {
    local key="$1"

    case "$key" in
        "sync-ios")
            cat <<'EOF'
üìã Sync Web Files to iOS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Copies web/index.html to iOS public folder
   ‚Ä¢ Syncs using Capacitor (npx cap sync ios)
   ‚Ä¢ Updates native iOS app with latest web changes

‚è±Ô∏è  Duration: ~10-30 seconds

üéØ Use when:
   ‚Ä¢ You've made changes to web/index.html
   ‚Ä¢ You want to test changes in iOS simulator/device
   ‚Ä¢ Before building for TestFlight or App Store

üìÇ Files affected:
   ‚Ä¢ web/index.html ‚Üí ios/App/App/public/index.html
   ‚Ä¢ Capacitor native bridge updates

üîß Command:
   ./deployment/sync-web-to-ios.sh
EOF
            ;;
        "launch-ios-simulator")
            cat <<'EOF'
üöÄ Launch in iOS Simulator
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Syncs web files to iOS
   ‚Ä¢ Builds the app for simulator
   ‚Ä¢ Boots an iOS simulator
   ‚Ä¢ Installs and launches your app
   ‚Ä¢ Opens Simulator window

‚è±Ô∏è  Duration: ~30-60 seconds (first time may be longer)

üéØ Use when:
   ‚Ä¢ Testing TacoTalk or your app
   ‚Ä¢ Want to see changes in iOS simulator
   ‚Ä¢ Developing and testing features
   ‚Ä¢ Quick preview of app appearance

‚ö†Ô∏è  Prerequisites:
   ‚Ä¢ Xcode installed
   ‚Ä¢ iOS simulators installed
   ‚Ä¢ Capacitor iOS platform added

üì± Features:
   ‚Ä¢ Auto-selects available iPhone simulator
   ‚Ä¢ Rebuilds app with latest changes
   ‚Ä¢ Launches simulator automatically
   ‚Ä¢ Shows helpful keyboard shortcuts

üí° Tips after launch:
   ‚Ä¢ ‚åò+D - Developer menu
   ‚Ä¢ ‚åò+K - Toggle keyboard
   ‚Ä¢ Device ‚Üí Shake - Shake gesture
   ‚Ä¢ Hot reload - Just run script again

üîß Script:
   ./deployment/launch-ios-simulator.sh
EOF
            ;;
        "testflight")
            cat <<'EOF'
üöÄ Publish to TestFlight
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Increments build number automatically
   ‚Ä¢ Syncs web files to iOS
   ‚Ä¢ Builds the app for release
   ‚Ä¢ Uploads to TestFlight for beta testing

‚è±Ô∏è  Duration: ~5-10 minutes

üéØ Use when:
   ‚Ä¢ Ready to release a new beta version
   ‚Ä¢ Want testers to try new features
   ‚Ä¢ Need to test on real devices via TestFlight

‚ö†Ô∏è  Prerequisites:
   ‚Ä¢ Valid Apple Developer account
   ‚Ä¢ App Store Connect API key configured
   ‚Ä¢ Certificates and provisioning profiles set up
   ‚Ä¢ Beta testers added in App Store Connect

üìÇ Creates:
   ‚Ä¢ New build in TestFlight
   ‚Ä¢ Archive in Xcode organizer

üîß Script:
   ./deployment/publish-testflight.sh
EOF
            ;;
        "appstore")
            cat <<'EOF'
üè™ Publish to App Store
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Increments version number
   ‚Ä¢ Builds release version
   ‚Ä¢ Uploads to App Store for review

‚è±Ô∏è  Duration: ~10-15 minutes

üéØ Use when:
   ‚Ä¢ Ready for public release
   ‚Ä¢ All testing is complete
   ‚Ä¢ App Store metadata is ready

‚ö†Ô∏è  Prerequisites:
   ‚Ä¢ Approved for App Store distribution
   ‚Ä¢ All App Store assets ready (screenshots, etc.)
   ‚Ä¢ Privacy policy and support URLs active
   ‚Ä¢ Export compliance completed

üìã After submission:
   ‚Ä¢ App goes into "Waiting for Review"
   ‚Ä¢ Review takes 1-3 days typically
   ‚Ä¢ You'll be notified via email

üîß Script:
   ./deployment/publish-appstore.sh
EOF
            ;;
        "sync-android")
            cat <<'EOF'
ü§ñ Sync Web Files to Android
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Copies web/index.html to Android assets
   ‚Ä¢ Syncs using Capacitor (npx cap sync android)
   ‚Ä¢ Updates native Android app

‚è±Ô∏è  Duration: ~10-30 seconds

üéØ Use when:
   ‚Ä¢ Made changes to web/index.html
   ‚Ä¢ Want to test in Android emulator/device
   ‚Ä¢ Before building APK or AAB

üìÇ Files affected:
   ‚Ä¢ web/index.html ‚Üí android/app/src/main/assets/
   ‚Ä¢ Capacitor native bridge updates

üîß Command:
   npx cap sync android
EOF
            ;;
        "playstore")
            cat <<'EOF'
üì¶ Publish to Play Store
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Builds signed AAB (Android App Bundle)
   ‚Ä¢ Uploads to Google Play Console
   ‚Ä¢ Creates new release for review

‚è±Ô∏è  Duration: ~5-10 minutes

üéØ Use when:
   ‚Ä¢ Ready for production or beta release
   ‚Ä¢ All testing complete
   ‚Ä¢ Play Store listing ready

‚ö†Ô∏è  Prerequisites:
   ‚Ä¢ Google Play Developer account
   ‚Ä¢ Upload key and signing configured
   ‚Ä¢ Play Store listing created
   ‚Ä¢ Privacy policy URL active

üìã Release tracks:
   ‚Ä¢ Internal testing (immediate)
   ‚Ä¢ Closed testing (beta)
   ‚Ä¢ Production (public release)

üîß Script:
   ./deployment/publish-playstore.sh
EOF
            ;;
        "init-template")
            cat <<'EOF'
üéØ Initialize Template
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Interactive setup for your app
   ‚Ä¢ Replaces all template placeholders
   ‚Ä¢ Configures Firebase, bundle IDs, app names
   ‚Ä¢ Updates all config files automatically

‚è±Ô∏è  Duration: ~5-10 minutes (interactive)

üéØ Use when:
   ‚Ä¢ Starting a new app from this template
   ‚Ä¢ First time setup
   ‚Ä¢ Need to reconfigure app identity

üìã Will prompt you for:
   ‚Ä¢ App name and display name
   ‚Ä¢ Bundle ID / Package name
   ‚Ä¢ Firebase configuration
   ‚Ä¢ Company/developer details
   ‚Ä¢ Contact information (email, phone)
   ‚Ä¢ Domain and URLs
   ‚Ä¢ Theme colors
   ‚Ä¢ Navigation tab configuration

üìÇ Files updated:
   ‚Ä¢ package.json
   ‚Ä¢ capacitor.config.json
   ‚Ä¢ .firebaserc
   ‚Ä¢ index.html, web/index.html
   ‚Ä¢ iOS Info.plist
   ‚Ä¢ Android strings.xml, build.gradle

üí° Tip: Have your Firebase project ready first!

üîß Script:
   ./init-template.sh
EOF
            ;;
        "revert-template")
            cat <<'EOF'
üîÑ Revert Template to TacoTalk
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Reverts template back to TacoTalk configuration
   ‚Ä¢ Restores all default values
   ‚Ä¢ Creates backup before reverting
   ‚Ä¢ Resets version to 1.0 build 1

‚è±Ô∏è  Duration: ~10 seconds

üéØ Use when:
   ‚Ä¢ Want to start over from scratch
   ‚Ä¢ Made a mistake during initialization
   ‚Ä¢ Testing the init-template script
   ‚Ä¢ Need to reset to clean state

‚ö†Ô∏è  What gets reverted:
   ‚Ä¢ App name ‚Üí TacoTalk
   ‚Ä¢ Bundle ID ‚Üí com.burrito.tacotalk
   ‚Ä¢ Firebase config ‚Üí Test credentials
   ‚Ä¢ All branding and navigation
   ‚Ä¢ Version numbers reset to 1.0 build 1

‚úÖ What stays:
   ‚Ä¢ Your custom code changes
   ‚Ä¢ Additional files you've added
   ‚Ä¢ Git history

üíæ Safety:
   ‚Ä¢ Creates backup in .template-backups/
   ‚Ä¢ Can restore from backup if needed
   ‚Ä¢ Asks for confirmation before reverting

üí° After revert:
   ‚Ä¢ Run npm install
   ‚Ä¢ Sync web to iOS
   ‚Ä¢ Run init-template.sh when ready

üîß Script:
   ./revert-template.sh
EOF
            ;;
        "show-config")
            cat <<'EOF'
üìã Show Current Configuration
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Displays all customizable parameters
   ‚Ä¢ Shows current values vs TacoTalk defaults
   ‚Ä¢ Indicates which values have been customized
   ‚Ä¢ Lists all files that contain these values

‚è±Ô∏è  Duration: ~2 seconds

üéØ Use when:
   ‚Ä¢ Want to see current template configuration
   ‚Ä¢ Checking if template has been customized
   ‚Ä¢ Before running init-template or revert
   ‚Ä¢ Debugging configuration issues
   ‚Ä¢ Documenting your app setup

üìä Shows:
   ‚Ä¢ App Identity (name, bundle ID, description)
   ‚Ä¢ Firebase Configuration (all credentials)
   ‚Ä¢ Developer Information (name, contact)
   ‚Ä¢ Navigation Configuration (tabs, icons, labels)
   ‚Ä¢ Version Information (iOS/Android)
   ‚Ä¢ OAuth Configuration

üé® Output format:
   ‚Ä¢ Green ‚úì = Using TacoTalk default
   ‚Ä¢ Blue (customized) = Has been changed
   ‚Ä¢ Shows customization count at top

üí° Example output:
   Template Status: Customized (8 of 25 parameters)

   üì± App Identity
     Display Name:         StarGazing (customized)
     Bundle ID:            com.astronomy.stargazing (customized)
     Package Name:         stargazing (customized)

   üî• Firebase Configuration
     Project ID:           stargazing-app-2024 (customized)
     API Key:              AIzaSy... (customized)

üîß Script:
   ./show-config.sh
EOF
            ;;
        "generate-app-icon")
            cat <<'EOF'
üé® Generate App Icons
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Creates app icons for iOS and Android
   ‚Ä¢ Generates all required sizes automatically
   ‚Ä¢ Supports multiple icon generation methods

‚è±Ô∏è  Duration: ~30 seconds

üéØ 4 Generation Methods:

   1Ô∏è‚É£  Emoji Icon (Quick & Fun)
      ‚Ä¢ Uses emoji as app icon (e.g., üè† for StepAhead)
      ‚Ä¢ Perfect for emoji-based branding
      ‚Ä¢ Auto-generates all sizes

   2Ô∏è‚É£  Gradient Icon (Colorful Placeholder)
      ‚Ä¢ Creates gradient with app initials
      ‚Ä¢ Customizable colors
      ‚Ä¢ Professional placeholder

   3Ô∏è‚É£  AI-Generated Icon
      ‚Ä¢ Opens browser to AI icon services
      ‚Ä¢ IconifyAI, Recraft, Dall-E, Midjourney
      ‚Ä¢ Download and process with option 4

   4Ô∏è‚É£  Use Existing Image
      ‚Ä¢ Provide 1024x1024 PNG file
      ‚Ä¢ Resizes to all required formats

‚ö†Ô∏è  Prerequisites:
   ‚Ä¢ ImageMagick installed (brew install imagemagick)
   ‚Ä¢ For emoji icons: Apple Color Emoji font

üìÇ Generates:
   ‚Ä¢ iOS: All sizes (20-1024px) in Assets.xcassets
   ‚Ä¢ Android: mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi
   ‚Ä¢ Root: icon.jpg (1024x1024)

üí° After generation:
   1. Run: npx cap sync ios
   2. Clean Xcode build (Product ‚Üí Clean Build Folder)
   3. Rebuild and test

üîß Script:
   ./deployment/generate-app-icon.sh
EOF
            ;;
        "increment-version")
            cat <<'EOF'
üì¶ Increment Version/Build Number
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Updates version numbers in all config files
   ‚Ä¢ Keeps iOS and Android versions in sync
   ‚Ä¢ Supports semantic versioning

‚è±Ô∏è  Duration: ~5 seconds

üéØ Options:
   1) Build number     (1.0.0 build 42 ‚Üí 43)
   2) Patch version    (1.0.5 ‚Üí 1.0.6)
   3) Minor version    (1.2.0 ‚Üí 1.3.0)
   4) Major version    (2.0.0 ‚Üí 3.0.0)

üìÇ Files updated:
   ‚Ä¢ package.json
   ‚Ä¢ iOS Info.plist (CFBundleVersion)
   ‚Ä¢ Android build.gradle (versionCode, versionName)

üí° Versioning strategy:
   ‚Ä¢ Build: Every TestFlight/beta release
   ‚Ä¢ Patch: Bug fixes
   ‚Ä¢ Minor: New features (backward compatible)
   ‚Ä¢ Major: Breaking changes or major updates

üîß Script:
   ./deployment/increment-version.sh
EOF
            ;;
        "fix-nanopb")
            cat <<'EOF'
üîß Fix nanopb Build Error
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Fixes Xcode build directory permission errors
   ‚Ä¢ Sets correct extended attributes
   ‚Ä¢ Resolves "not created by build system" errors

‚è±Ô∏è  Duration: ~10 seconds

üéØ Use when:
   ‚Ä¢ Getting Xcode build errors about directories
   ‚Ä¢ Error mentions "not created by build system"
   ‚Ä¢ nanopb or Firebase build fails

‚ö†Ô∏è  Common error message:
   "Could not delete .../nanopb/build because
    it was not created by the build system"

üîß What it fixes:
   ‚Ä¢ Sets com.apple.xcode.CreatedByBuildSystem
   ‚Ä¢ Runs on DerivedData directories
   ‚Ä¢ Clears problematic build folders

üí° Safe to run anytime - won't harm your project

üîß Script:
   ./deployment/fix-nanopb.sh
EOF
            ;;
        "verify-oauth")
            cat <<'EOF'
üîç Verify OAuth Configuration
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Checks OAuth client IDs in config files
   ‚Ä¢ Verifies URL schemes are correct
   ‚Ä¢ Ensures Firebase OAuth setup is complete

‚è±Ô∏è  Duration: ~5 seconds

üéØ Validates:
   ‚Ä¢ iOS Info.plist URL schemes
   ‚Ä¢ Google OAuth client IDs
   ‚Ä¢ Firebase configuration consistency
   ‚Ä¢ Reversed client ID format

‚ö†Ô∏è  Checks for common issues:
   ‚Ä¢ Missing URL schemes
   ‚Ä¢ Incorrect client ID format
   ‚Ä¢ Mismatched configurations

üí° Run this before:
   ‚Ä¢ Implementing Google Sign-In
   ‚Ä¢ Testing OAuth flows
   ‚Ä¢ Deploying with social auth

üîß Script:
   ./deployment/verify-oauth-config.sh
EOF
            ;;
        "check-google-oauth")
            cat <<'EOF'
üîë Check Google OAuth Credentials
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Validates GoogleService-Info.plist
   ‚Ä¢ Checks OAuth client configuration
   ‚Ä¢ Verifies all required keys are present

‚è±Ô∏è  Duration: ~5 seconds

üéØ Validates:
   ‚Ä¢ GoogleService-Info.plist exists
   ‚Ä¢ CLIENT_ID present and correct format
   ‚Ä¢ REVERSED_CLIENT_ID matches
   ‚Ä¢ Bundle ID matches Firebase project

‚ö†Ô∏è  Common issues detected:
   ‚Ä¢ Missing plist file
   ‚Ä¢ Wrong bundle ID
   ‚Ä¢ Invalid client ID format
   ‚Ä¢ Mismatched Firebase project

üí° Run after:
   ‚Ä¢ Downloading new GoogleService-Info.plist
   ‚Ä¢ Changing bundle ID
   ‚Ä¢ Setting up new Firebase project

üîß Script:
   ./deployment/verify-google-plist.sh
EOF
            ;;
        "verify-setup")
            cat <<'EOF'
‚úÖ Verify General Setup
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Comprehensive project health check
   ‚Ä¢ Verifies all configuration files
   ‚Ä¢ Checks dependencies and tools
   ‚Ä¢ Validates Firebase setup

‚è±Ô∏è  Duration: ~10-15 seconds

üéØ Checks:
   ‚Ä¢ Node.js and npm versions
   ‚Ä¢ Capacitor installation
   ‚Ä¢ iOS and Android projects exist
   ‚Ä¢ Firebase config files present
   ‚Ä¢ Bundle IDs consistent across platforms
   ‚Ä¢ Required tools (Xcode, Android Studio)

üìã Validates:
   ‚úì package.json configuration
   ‚úì capacitor.config.json
   ‚úì Firebase .firebaserc
   ‚úì iOS Info.plist
   ‚úì Android build.gradle
   ‚úì Web assets present

üí° Run this:
   ‚Ä¢ After init-template.sh
   ‚Ä¢ Before first build
   ‚Ä¢ When troubleshooting issues
   ‚Ä¢ After major config changes

üîß Script:
   ./deployment/verify-setup.sh
EOF
            ;;
        "test-firebase")
            cat <<'EOF'
üî• Test Firebase Connection
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Tests Firebase Authentication
   ‚Ä¢ Tests Firestore database connection
   ‚Ä¢ Creates a temporary test user
   ‚Ä¢ Verifies read/write operations
   ‚Ä¢ Automatically cleans up test data

‚è±Ô∏è  Duration: ~5-10 seconds

üéØ Test Steps:
   1. Create test user with Authentication
   2. Write test data to Firestore
   3. Read test data from Firestore
   4. Sign out and sign in again
   5. Delete test user and data

‚úÖ Verifies:
   ‚Ä¢ Firebase project is accessible
   ‚Ä¢ API key is correct
   ‚Ä¢ Authentication is enabled
   ‚Ä¢ Firestore is configured
   ‚Ä¢ Read/write permissions work
   ‚Ä¢ Network connectivity to Firebase

üí° Run this:
   ‚Ä¢ After setting up Firebase config
   ‚Ä¢ Before deploying to production
   ‚Ä¢ When troubleshooting auth issues
   ‚Ä¢ To verify Firebase credentials

‚ö†Ô∏è  Requirements:
   ‚Ä¢ Node.js installed
   ‚Ä¢ firebase npm package installed
   ‚Ä¢ Internet connection
   ‚Ä¢ Valid Firebase configuration

üîß Script:
   ./deployment/test-firebase-connection.sh
EOF
            ;;
        "update-version-html")
            cat <<'EOF'
üìù Update App Version in HTML
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Updates version number displayed in app UI
   ‚Ä¢ Syncs version from package.json to HTML
   ‚Ä¢ Updates all HTML files (index, web, iOS)

‚è±Ô∏è  Duration: ~5 seconds

üéØ Use when:
   ‚Ä¢ After incrementing version
   ‚Ä¢ Want to show version in app footer/about
   ‚Ä¢ Syncing version across all files

üìÇ Files updated:
   ‚Ä¢ index.html
   ‚Ä¢ web/index.html
   ‚Ä¢ ios/App/App/public/index.html

üí° Reads version from:
   ‚Ä¢ package.json "version" field

üîß Script:
   ./deployment/update-app-version.sh
EOF
            ;;
        "generate-beta-notes")
            cat <<'EOF'
üìã Generate Beta Release Notes
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Creates release notes for TestFlight
   ‚Ä¢ Generates changelog from git commits
   ‚Ä¢ Formats for App Store Connect

‚è±Ô∏è  Duration: ~10 seconds

üéØ Use when:
   ‚Ä¢ Preparing TestFlight release
   ‚Ä¢ Need to document changes for testers
   ‚Ä¢ Creating version history

üìã Includes:
   ‚Ä¢ Recent commit messages
   ‚Ä¢ Version number and build
   ‚Ä¢ Date and time
   ‚Ä¢ Formatted for beta testers

üí° Customize:
   ‚Ä¢ Edit template in script
   ‚Ä¢ Add what's new section
   ‚Ä¢ Include known issues

üîß Script:
   ./deployment/generate-beta-notes.sh
EOF
            ;;
        "cleanup-xcode")
            cat <<'EOF'
üßπ Cleanup Xcode Archives & Temp Data
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Removes Xcode DerivedData
   ‚Ä¢ Cleans old archives
   ‚Ä¢ Frees up disk space
   ‚Ä¢ Clears build cache

‚è±Ô∏è  Duration: ~30 seconds

üéØ Use when:
   ‚Ä¢ Running low on disk space
   ‚Ä¢ Experiencing weird build issues
   ‚Ä¢ After major Xcode updates
   ‚Ä¢ Build errors that won't go away

üíæ Typically frees: 5-20 GB

üìÇ Removes:
   ‚Ä¢ ~/Library/Developer/Xcode/DerivedData
   ‚Ä¢ ~/Library/Developer/Xcode/Archives (old)
   ‚Ä¢ Build cache
   ‚Ä¢ Module cache

‚ö†Ô∏è  Safe to run - doesn't affect source code

üí° Tip: Run this if builds are failing randomly

üîß Script:
   ./deployment/cleanup-xcode.sh
EOF
            ;;
        "pre-submission-test")
            cat <<'EOF'
üî¨ Pre-Submission Test for App Store
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Runs comprehensive pre-flight checks
   ‚Ä¢ Validates App Store requirements
   ‚Ä¢ Checks for common rejection reasons
   ‚Ä¢ Validates assets and metadata

‚è±Ô∏è  Duration: ~1-2 minutes

üéØ Validates:
   ‚Ä¢ App icons (all sizes)
   ‚Ä¢ Launch screens
   ‚Ä¢ Privacy policy URL accessible
   ‚Ä¢ Support URL accessible
   ‚Ä¢ App Store description complete
   ‚Ä¢ Screenshots present (if required)
   ‚Ä¢ Age rating appropriate
   ‚Ä¢ Export compliance declared

‚ö†Ô∏è  Checks for rejections:
   ‚Ä¢ Missing privacy policy
   ‚Ä¢ Broken support URLs
   ‚Ä¢ Incomplete metadata
   ‚Ä¢ Missing app icons
   ‚Ä¢ Invalid bundle ID

üí° Run before:
   ‚Ä¢ Every App Store submission
   ‚Ä¢ After major updates
   ‚Ä¢ First release

üîß Script:
   ./deployment/pre-submission-test.sh
EOF
            ;;
        "setup-privacy-policy")
            cat <<'EOF'
üìã Setup Privacy Policy for App Store
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù What it does:
   ‚Ä¢ Updates privacy.html with StepAhead branding
   ‚Ä¢ Deploys privacy policy to Firebase Hosting
   ‚Ä¢ Adds privacy URL to Info.plist automatically
   ‚Ä¢ Provides URL for App Store Connect

‚è±Ô∏è  Duration: ~2-3 minutes

üéØ Steps performed:
   1. Updates privacy.html (removes template branding)
   2. Creates privacy-site directory
   3. Initializes Firebase Hosting
   4. Deploys privacy policy to Firebase
   5. Optionally adds URL to Info.plist

‚úÖ Results in:
   ‚Ä¢ Privacy policy hosted at:
     https://stepahead-519b0.web.app/
   ‚Ä¢ URL automatically added to iOS app
   ‚Ä¢ Ready for App Store submission

‚ö†Ô∏è  Requirements:
   ‚Ä¢ Firebase CLI installed (script will install if needed)
   ‚Ä¢ Firebase project configured
   ‚Ä¢ Internet connection

üí° Run this:
   ‚Ä¢ Before first App Store submission
   ‚Ä¢ When pre-submission test shows privacy URL missing
   ‚Ä¢ After updating privacy policy content

üîó Privacy Policy URL will be:
   https://stepahead-519b0.web.app/index.html

üîß Script:
   ./deployment/setup-privacy-policy.sh
EOF
            ;;
        "fix-firestore-rules")
            cat <<'EOF'
üîí Fix Firestore Security Rules
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ùå Problem: Users sign up but don't appear in Firestore

üìù What it does:
   ‚Ä¢ Opens Firebase Console to Firestore Rules
   ‚Ä¢ Provides production-ready security rules
   ‚Ä¢ Guides you through updating rules
   ‚Ä¢ Allows user creation during signup

‚ö†Ô∏è  Common symptoms:
   ‚Ä¢ Users exist in Firebase Auth
   ‚Ä¢ Users DON'T exist in Firestore database
   ‚Ä¢ App appears to work but data isn't saved
   ‚Ä¢ Silent failures during signup

üîß The fix:
   ‚Ä¢ Updates security rules to allow authenticated writes
   ‚Ä¢ Enables user document creation during signup
   ‚Ä¢ Maintains security (users can only access their own data)

‚è±Ô∏è  Duration: 2-3 minutes

üí° After fixing:
   ‚Ä¢ New signups will create Firestore documents
   ‚Ä¢ Existing auth users may need to re-signup
   ‚Ä¢ Test with: node deployment/check-firestore-users.js

üîß Script:
   ./deployment/fix-firestore-rules.sh

üìñ Full guide: docs/FIRESTORE_USER_NOT_CREATED.md
EOF
            ;;
        "reset-leaderboard")
            cat <<'EOF'
üóëÔ∏è  Reset Leaderboard (‚ö†Ô∏è  DANGER)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è  WARNING: DESTRUCTIVE OPERATION

üìù What it does:
   ‚Ä¢ Permanently deletes leaderboard data
   ‚Ä¢ Removes all user scores from Firestore
   ‚Ä¢ Cannot be undone

‚è±Ô∏è  Duration: ~10-30 seconds

üéØ Two options:
   1) Soft Delete - Marks as deleted, keeps data
   2) Hard Delete - PERMANENTLY removes data

‚ö†Ô∏è  Use ONLY when:
   ‚Ä¢ Testing leaderboard functionality
   ‚Ä¢ Starting fresh in development
   ‚Ä¢ Clearing test data before production

‚ùå DO NOT use in production without backup!

üí° Best practices:
   ‚Ä¢ Backup Firestore first
   ‚Ä¢ Use soft delete for testing
   ‚Ä¢ Hard delete only when absolutely necessary
   ‚Ä¢ Document why you're deleting

üîß Scripts:
   ‚Ä¢ Soft: ./deployment/soft-delete-leaderboard.sh
   ‚Ä¢ Hard: ./deployment/reset-leaderboard.sh
EOF
            ;;
        "exit")
            cat <<'EOF'
üö™ Exit
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëã Thanks for using the deployment menu!

üí° Quick tips:
   ‚Ä¢ Run ./run-me-first.sh anytime
   ‚Ä¢ Use ‚Üë‚Üì arrows to navigate
   ‚Ä¢ Press Esc or Ctrl+C to exit
   ‚Ä¢ Classic menu: ./what-do-you-want-2-do.sh

üìö Documentation:
   ‚Ä¢ docs/ - Detailed guides
   ‚Ä¢ TEMPLATE_GUIDE.md - Template usage
   ‚Ä¢ README.md - Project overview

üîó Useful links:
   ‚Ä¢ Firebase Console
   ‚Ä¢ App Store Connect
   ‚Ä¢ Google Play Console

Happy deploying! üöÄ
EOF
            ;;
    esac
}

# Handle preview mode (called by fzf)
if [ "$1" = "--preview" ]; then
    get_preview "$2"
    exit 0
fi

# Create menu items with categories
create_menu_items() {
    cat <<'EOF'
ios-1|üîÑ Sync web to iOS|sync-ios
ios-2|üöÄ Launch in Simulator|launch-ios-simulator
ios-3|üì¶ Publish to TestFlight|testflight
ios-4|üè™ Publish to App Store|appstore
android-1|ü§ñ Sync web to Android|sync-android
android-2|üì¶ Publish to Play Store|playstore
setup-1|üéØ Initialize template|init-template
setup-2|üîÑ Revert to TacoTalk|revert-template
setup-3|üìã Show current config|show-config
tools-1|üé® Generate App Icons|generate-app-icon
tools-2|üì¶ Increment version/build|increment-version
tools-3|üîß Fix nanopb build error|fix-nanopb
tools-4|üîç Verify OAuth config|verify-oauth
tools-5|üîë Check Google OAuth|check-google-oauth
tools-6|‚úÖ Verify general setup|verify-setup
tools-7|üî• Test Firebase connection|test-firebase
tools-8|üìù Update version in HTML|update-version-html
tools-9|üìã Generate beta notes|generate-beta-notes
tools-10|üßπ Cleanup Xcode data|cleanup-xcode
tools-11|üî¨ Pre-submission test|pre-submission-test
tools-12|üìã Setup Privacy Policy|setup-privacy-policy
tools-13|üîí Fix Firestore Rules|fix-firestore-rules
admin-1|üóëÔ∏è  Reset Leaderboard ‚ö†Ô∏è|reset-leaderboard
exit-1|üö™ Exit|exit
EOF
}

# Function to run selected action
run_action() {
    local action="$1"

    case "$action" in
        "sync-ios")
            run_script "sync-web-to-ios.sh"
            ;;
        "launch-ios-simulator")
            run_script "launch-ios-simulator.sh"
            ;;
        "testflight")
            run_script "publish-testflight.sh"
            ;;
        "appstore")
            run_script "publish-appstore.sh"
            ;;
        "sync-android")
            echo ""
            echo -e "${BLUE}‚ñ∂ Syncing web to Android${NC}"
            echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo ""
            npx cap sync android
            ;;
        "playstore")
            run_script "publish-playstore.sh"
            ;;
        "init-template")
            echo ""
            echo -e "${BLUE}‚ñ∂ Running: init-template.sh${NC}"
            echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo ""
            "$SCRIPT_DIR/init-template.sh"
            echo ""
            echo -e "${GREEN}‚úÖ Completed${NC}"
            echo ""
            echo -ne "${YELLOW}Press Enter to continue...${NC}"
            read -r < /dev/tty
            ;;
        "revert-template")
            echo ""
            echo -e "${BLUE}‚ñ∂ Running: revert-template.sh${NC}"
            echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo ""
            "$SCRIPT_DIR/revert-template.sh"
            echo ""
            echo -e "${GREEN}‚úÖ Completed${NC}"
            echo ""
            echo -ne "${YELLOW}Press Enter to continue...${NC}"
            read -r < /dev/tty
            ;;
        "show-config")
            echo ""
            echo -e "${BLUE}‚ñ∂ Running: show-config.sh${NC}"
            echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
            echo ""
            "$SCRIPT_DIR/show-config.sh"
            echo ""
            echo -e "${GREEN}‚úÖ Completed${NC}"
            echo ""
            echo -ne "${YELLOW}Press Enter to continue...${NC}"
            read -r < /dev/tty
            ;;
        "generate-app-icon")
            run_script "generate-app-icon.sh"
            ;;
        "increment-version")
            echo ""
            echo -e "${YELLOW}Increment which version?${NC}"
            echo "  1) Build number"
            echo "  2) Patch version (1.0.X)"
            echo "  3) Minor version (1.X.0)"
            echo "  4) Major version (X.0.0)"
            echo -ne "${YELLOW}Enter choice [1]:${NC} "
            read version_choice

            case $version_choice in
                1|"")
                    run_script "increment-version.sh" "build"
                    ;;
                2)
                    run_script "increment-version.sh" "patch"
                    ;;
                3)
                    run_script "increment-version.sh" "minor"
                    ;;
                4)
                    run_script "increment-version.sh" "major"
                    ;;
                *)
                    echo -e "${RED}‚ùå Invalid choice${NC}"
                    ;;
            esac
            ;;
        "fix-nanopb")
            run_script "fix-nanopb.sh"
            ;;
        "verify-oauth")
            run_script "verify-oauth-config.sh"
            ;;
        "check-google-oauth")
            run_script "verify-google-plist.sh"
            ;;
        "verify-setup")
            run_script "verify-setup.sh"
            ;;
        "test-firebase")
            run_script "test-firebase-connection.sh"
            ;;
        "update-version-html")
            run_script "update-app-version.sh"
            ;;
        "generate-beta-notes")
            run_script "generate-beta-notes.sh"
            ;;
        "cleanup-xcode")
            run_script "cleanup-xcode.sh"
            ;;
        "pre-submission-test")
            run_script "pre-submission-test.sh"
            ;;
        "setup-privacy-policy")
            run_script "setup-privacy-policy.sh"
            ;;
        "fix-firestore-rules")
            run_script "fix-firestore-rules.sh"
            ;;
        "reset-leaderboard")
            echo ""
            echo -e "${YELLOW}Choose reset method:${NC}"
            echo "  1) Soft Delete (marks as deleted, keeps data)"
            echo "  2) Hard Delete (permanently removes data)"
            echo -ne "${YELLOW}Enter choice [1-2]:${NC} "
            read method
            if [ "$method" = "1" ]; then
                run_script "soft-delete-leaderboard.sh"
            elif [ "$method" = "2" ]; then
                echo ""
                echo -e "${RED}‚ö†Ô∏è  WARNING: Hard Delete${NC}"
                echo -e "${RED}   This will PERMANENTLY DELETE leaderboard entries!${NC}"
                echo ""
                echo -ne "${YELLOW}Continue? (y/N):${NC} "
                read confirm
                if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                    run_script "reset-leaderboard.sh"
                else
                    echo -e "${BLUE}‚ÑπÔ∏è  Cancelled${NC}"
                fi
            else
                echo -e "${BLUE}‚ÑπÔ∏è  Cancelled${NC}"
            fi
            ;;
        "exit")
            echo ""
            echo -e "${BLUE}üëã Goodbye!${NC}"
            echo ""
            exit 0
            ;;
    esac
}

# Function to run a deployment script
run_script() {
    local script_name=$1
    shift
    local script_path="$DEPLOYMENT_DIR/$script_name"

    if [ -f "$script_path" ]; then
        echo ""
        echo -e "${BLUE}‚ñ∂ Running: $script_name${NC}"
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo ""
        bash "$script_path" "$@"

        echo ""
        echo -e "${GREEN}‚úÖ Completed${NC}"
        echo ""
        echo -ne "${YELLOW}Press Enter to continue...${NC}"
        read
    else
        echo -e "${RED}‚ùå Error: Script not found: $script_path${NC}"
        echo ""
        echo -ne "${YELLOW}Press Enter to continue...${NC}"
        read
    fi
}

# Main loop
main() {
    while true; do
        show_header

        # Use fzf to select an option with preview
        selected=$(create_menu_items | fzf \
            --height=100% \
            --layout=reverse \
            --border=horizontal \
            --prompt="‚ùØ " \
            --pointer="‚ñ∂" \
            --marker="‚úì" \
            --header="üöÄ App Deployment Menu ‚îÇ ‚Üë‚Üì Navigate ‚Ä¢ Enter Select ‚Ä¢ Esc Exit ‚Ä¢ Type to filter" \
            --preview="$0 --preview {3}" \
            --preview-window=right:60%:wrap \
            --color=fg:#d0d0d0,bg:#121212,hl:#5f87af \
            --color=fg+:#d0d0d0,bg+:#262626,hl+:#5fd7ff \
            --color=info:#afaf87,prompt:#d7005f,pointer:#af5fff \
            --color=marker:#87ff00,spinner:#af5fff,header:#87afaf \
            --delimiter="|" \
            --with-nth=2 \
            --bind="ctrl-c:abort,esc:abort")

        # Exit if user cancelled (Esc or Ctrl+C)
        if [ -z "$selected" ]; then
            echo ""
            echo -e "${BLUE}üëã Goodbye!${NC}"
            echo ""
            exit 0
        fi

        # Extract the action key (3rd field)
        action=$(echo "$selected" | cut -d'|' -f3)

        # Clear screen and run action
        clear
        run_action "$action"
    done
}

# Run main function
main
